{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Solved.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PNzn4IpGBHae",
        "colab_type": "text"
      },
      "source": [
        "# 1.0 Visualizing Frequency Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nkptnXR6BRFA",
        "colab_type": "text"
      },
      "source": [
        "## 1.1 Visualizing Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XZcQgRvpBT5J",
        "colab_type": "text"
      },
      "source": [
        "To find patterns in a frequency table we have to look up the frequency of each unique value or class interval and at the same time compare the frequencies. This process can get time consuming for tables with many unique values or class intervals, or when the frequency values are large and hard to compare against each other.\n",
        "\n",
        "We can solve this problem by **visualizing** the data in the tables with the help of graphs. Graphs make it much easier to scan and compare frequencies, providing us with a single picture of the entire distribution of a variable.\n",
        "\n",
        "Because they are easy to grasp and also eye-catching, graphs are a better choice over frequency tables if we need to present our findings to a non-technical audience.\n",
        "\n",
        "In this lesson, we'll learn about three kinds of graphs:\n",
        "\n",
        "- Bar plots.\n",
        "- Pie charts.\n",
        "- Histograms.\n",
        "\n",
        "By the end of the mission, we'll know how to generate ourselves the graphs below, and we'll know when it makes sense to use each:\n",
        "\n",
        "<center><img width=\"1000\" src=\"https://drive.google.com/uc?export=view&id=1Rxdp-_t01VXmbJayEqTs4WOn4_-SAL6t\"></center>\n",
        "\n",
        "We've already learned about bar plots and histograms in the EDA lessons. In this mission we build upon that knowledge and discuss the graphs in the context of statistics by learning for what kind of variables each graph is most suitable for.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YMHx4wBYBfQz",
        "colab_type": "text"
      },
      "source": [
        "## 1.2 Bar Plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-qoHpwyoCk4o",
        "colab_type": "text"
      },
      "source": [
        "For variables measured on a **nominal** or an **ordinal** scale it's common to use a **bar plot** to visualize their distribution. To generate a **bar plot** for the distribution of a variable we need two sets of values:\n",
        "\n",
        "- One set containing the unique values.\n",
        "- Another set containing the frequency for each unique value.\n",
        "\n",
        "We can get this data easily from a frequency table. We can use **Series.value_counts()** to generate the table, and then use the [Series.plot.bar()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.plot.bar.html) method on the resulting table to generate a **bar plot**. Using the same WNBA dataset we've been working with for the past missions, this is how we'd do that for the Pos (player position) variable:\n",
        "\n",
        "```python\n",
        ">> wnba['Pos'].value_counts().plot.bar()\n",
        "```\n",
        "\n",
        "<center><img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1xPuz8XKNPPmGVdpMbqLcVNniySRGGuDc\"></center>\n",
        "\n",
        "The **Series.plot.bar()** method generates a vertical bar plot with the frequencies on the y-axis, and the unique values on the x-axis. To generate a horizontal bar plot, we can use the [Series.plot.barh() method](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.plot.barh.html):\n",
        "\n",
        "```python\n",
        ">> wnba['Pos'].value_counts().plot.barh()\n",
        "```\n",
        "<center><img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1jQCBSxV20rDElban00Shk08R6ykT0oXk\"></center>\n",
        "\n",
        "\n",
        "As we'll see in the next screen, horizontal bar plots are ideal to use when the labels of the unique values are long.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- We've taken information from the **Experience** column, and created a new column named **Exp_ordinal**, which is measured on an ordinal scale. The new column has five unique labels, and each one corresponds to a number of years a player has played in WNBA:\n",
        "\n",
        "<img width=\"300\" src=\"https://drive.google.com/uc?export=view&id=1tqqE0d76Xk1baGCTWNEkYbJ9Muevfuw3\">\n",
        "\n",
        "- Create a **bar plot** to display the distribution of the **Exp_ordinal** variable:\n",
        "  - Generate a frequency table for the **Exp_ordinal** variable.\n",
        "  - Sort the table by unique labels in an ascending order using the techiques we learned in the previous mission.\n",
        "  - Generate a bar plot using the **Series.plot.bar()** method.\n",
        "  \n",
        "  \n",
        "  \n",
        "  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDUEcS7LDCIo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SIotW1ujC4L5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "e197e6f4-1bd5-4190-bcf5-877914b7a074"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "wnba = pd.read_csv(\"wnba.csv\")\n",
        "wnba.columns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Name', 'Team', 'Pos', 'Height', 'Weight', 'BMI', 'Birth_Place',\n",
              "       'Birthdate', 'Age', 'College', 'Experience', 'Games Played', 'MIN',\n",
              "       'FGM', 'FGA', 'FG%', '15:00', '3PA', '3P%', 'FTM', 'FTA', 'FT%', 'OREB',\n",
              "       'DREB', 'REB', 'AST', 'STL', 'BLK', 'TO', 'PTS', 'DD2', 'TD3'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2OFRlzyBEPFG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "wnba.loc[wnba.Experience == \"R\",\"Experience\"] = 0"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7pIL8I-CDRDW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "wnba[\"Exp_ordinal\"] = pd.cut(wnba.Experience.astype(int),\n",
        "       bins=[-1,0,3,5,10,50],\n",
        "       labels=[\"Rookie\",\"Little experience\",\"Experienced\",\"Very experienced\", \"Veteran\"])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PBEAHv7c0MzM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "outputId": "0ec8729c-ee9c-4092-cec5-43ac47719321"
      },
      "source": [
        "wnba.Exp_ordinal.value_counts().iloc[[3,0,2,1,4]].plot(kind='bar',color=['r','c','g','k','y'])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nEoZRweMAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nMKBxeeVGvTc",
        "colab_type": "text"
      },
      "source": [
        "## 1.3 Horizontal Bar Plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pJ8bE9MhHEym",
        "colab_type": "text"
      },
      "source": [
        "One of the problems with the bar plot we built in the last exercise is that the tick labels of the x-axis are hard to read:\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1gKTo1l94020_BBnk7ilS8WzllVFzYfFE\">\n",
        "\n",
        "\n",
        "To fix this we can rotate the labels, or we can switch to a horizontal bar plot. We can rotate the labels using the rot parameter of **Series.plot.bar()** method we used. The labels are already rotated at 90°, and we can tilt them a bit at 45°:\n",
        "\n",
        "```python\n",
        ">> wnba['Exp_ordinal'].value_counts().iloc[[3,0,2,1,4]].plot.bar(rot = 45)\n",
        "```\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1wD2TvUAm0fyBrVwWeE5KnTxuz2IS6RKf\">\n",
        "\n",
        "Slightly better, but we can do a better job with a horizontal bar plot. If we wanted to publish this bar plot, we'd also have to make it more informative by adding a title. This is what we'll do in the next exercise, but for now this is how we could do that for the **Pos** variable (note that we use the [Series.plot.barh()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.plot.barh.html) method, not **Series.plot.bar()**):\n",
        "\n",
        "```python\n",
        ">> wnba['Pos'].value_counts().plot.barh(title = 'Number of players in WNBA by position')\n",
        "```\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1cNU5qtgeawYB-9ec-pC16XtN_6Rtb1Sd\">\n",
        "\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Create a horizontal bar plot to visualize the distribution of the **Exp_ordinal** variable.\n",
        "  - Generate a frequency table for the **Exp_ordinal** variable.\n",
        "  - Sort the table by unique labels in an ascending order.\n",
        "  - Use the **Series.plot.barh()** method to generate the horizontal bar plot.\n",
        "  - Add the following title to the plot: **Number of players in WNBA by level of experience.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VzVfMxeCHcH5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FqDEIzED3DP4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "e9a9faf9-9edc-4a03-dfb3-3f417b2afc11"
      },
      "source": [
        "wnba.Exp_ordinal.value_counts().iloc[[3,0,2,1,4]].plot(kind='barh',\n",
        "                                                       color=['r','c','g','k','y'],\n",
        "                                                       title=\"Number of players in WNBA by level of experience\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "skP7Zu_1JBD7",
        "colab_type": "text"
      },
      "source": [
        "## 1.4 Pie Charts"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bIqY5OV2JGii",
        "colab_type": "text"
      },
      "source": [
        "Another kind of graph we can use to visualize the distribution of **nominal** and **ordinal** variables is a **pie chart**.\n",
        "\n",
        "Just as the name suggests, a pie chart is structured pretty much like a regular pie: it takes the form of a circle and is divided in wedges. Each wedge in a pie chart represents a category (one of the unique labels), and the size of each wedge is given by the proportion (or percentage) of that category in the distribution.\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1KKprkhfZaGe0CkLO0p3FzoJ6i71QrSv-\">\n",
        "\n",
        "\n",
        "We can generate pie charts using the [Series.plot.pie() method](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.plot.pie.html). This is how we'd do that for the **Pos** variable:\n",
        "\n",
        "```python\n",
        ">> wnba['Pos'].value_counts().plot.pie()\n",
        "```\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1MvVv73TYBDN5VNZ2gELxp5I4O3bn6UJC\">\n",
        "\n",
        "\n",
        "The main advantage of pie charts over bar plots is that they provide a much better sense for the relative frequencies (proportions and percentages) in the distribution. Looking at a bar plot, we can see that categories are more or less numerous than others, but it's really hard to tell what proportion in the distribution each category takes.\n",
        "\n",
        "With pie charts, we can immediately get a visual sense for the proportion each category takes in a distribution. Just by eyeballing the pie chart above we can make a series of observations in terms of proportions:\n",
        "\n",
        "- Guards (\"G\") take about two fifths (2/5) of the distribution.\n",
        "- Forwards (\"F\") make up roughly a quarter (1/4) of the distribution.\n",
        "- Close to one fifth (1/5) of the distribution is made of centers (\"C\").\n",
        "- Combined positions (\"G/F\" and \"F/C\") together make up roughly one fifth (1/5) of the distribution.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Generate a pie chart to visualize the distribution of the **Exp_ordinal** variable.\n",
        "  - Generate a frequency table for the **Exp_ordinal** variable. Don't sort the table this time.\n",
        "  - Use the **Series.plot.pie()** method to generate the pie plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enHJko8sXfWi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "79N5MIxD4RC_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "825ac799-71dd-4290-81c2-d2ea76fa9898"
      },
      "source": [
        "wnba.Exp_ordinal.value_counts().iloc[[3,0,2,1,4]].plot(kind='pie')\n",
        "plt.ylabel(\"\")\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAASoAAADuCAYAAACONEo5AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xl8VOXZ//HPlYUdhlUUXIK4JEAE\nAQGFIo1W2wd/WreK1kdsbX1sqda2tk1darS10mpFLcVoayvalq5abWmVugCyioIQYKKoBMWNHRKy\nz1y/P85JCTF7ZnKfmbner9e8MnPmzDnfLHPlPvfc5z6iqhhjTJCluQ5gjDEtsUJljAk8K1TGmMCz\nQmWMCTwrVMaYwLNCZYwJPCtUxpjAs0JljAk8K1TGmMCzQmWMCTwrVMaYwLNCZYwJPCtUxpjAs0Jl\njAk8K1TGmMCzQmWMCTwrVMaYwLNCZYwJPCtUxpjAs0JljAk8K1TGmMCzQmWMCTwrVMaYwLNCZYwJ\nvIQsVCJS1siy60TkKv/+1SIypN5zN4pIj3qPS0RkYOekbTsRGS8iD7rOYUxQSCJeKVlEylS1VzPP\nLwZuUtVX/cclwHhV3dXY4yARkQxVrXWdw5ggScgWVWNEpEBEbhKRS4DxwO9F5HUR+SYwBHhJRF5q\n5HVXisgr/roPi0h6I+uME5ElIvKaiDwnIkeJSIaIrBGRaf46d4vIXf79EhH5mYgU+ds+wV8+SET+\n5r9ujYhMrpf9CRFZDjwhItNE5J/+cz1F5Df+dtaJyAX+8qtF5EkReVZEtojIz+rl/ayIrBWR9SLy\nQnPbMSYhqGrC3YCyRpYV4LWiABbjtZjqnisBBjZ8DOQA/wAy/eXzgKsabDcTWAEM8h9fBvzGvz8S\nCANnA+uALvW2f4t//yrgn/79PwBT/PvHAuF62V8DuvuPp9V7zU+AK/37fYE3gZ7A1cA7QAjoBmwD\njgEGAe8Bw/zX9G9uO65/l3azW2tuGW2qasnnLGAcsEZEALoDOxqsczIwCviPv0468CGAqm4SkSeA\nfwKnq2p1vdctqPd1jn//bGCEvx2APiJSdwj7jKpWNJLxHOB8EbnJf9wNr8gBvKCq+wFEZDNwHNAP\nWKqqW/2Me1rYTrjxH40xwZHqhUqA+ar6gxbW2aSqpzfxfC6wDziiwXJt5H4aMElVKw/bgVe4Djaz\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fvXkTu59Jh_T",
        "colab_type": "text"
      },
      "source": [
        "## 1.5  Customizing a Pie Chart"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BosraT_ZK0vI",
        "colab_type": "text"
      },
      "source": [
        "The pie chart we generated in the previous exercise is more an ellipsis than a circle, and the **Exp_ordinal** label is unaesthetic and hard to read:\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1tVBOULsftVpM-DH75lZvNGY09Jdavsik\">\n",
        "\n",
        "\n",
        "To give a pie chart the right shape, we need to specify equal values for height and width in the **figsize** parameter of **Series.plot.pie()**. The **Exp_ordinal** is the label of a hidden y-axis, which means we can use the **plt.ylabel()** function to remove it. This is how we can do this for the **Pos** variable:\n",
        "\n",
        "```python\n",
        ">> import matplotlib.pyplot as plt\n",
        ">> wnba['Pos'].value_counts().plot.pie(figsize = (6,6))\n",
        ">> plt.ylabel('')\n",
        "```\n",
        "\n",
        "<img width=\"250\" src=\"https://drive.google.com/uc?export=view&id=1-ER6QNonL-CTu6tBMnvdL4PPER17igTt\">\n",
        "\n",
        "\n",
        "Ideally, we'd have proportions or percentages displayed on each wedge of the pie chart. Fortunately, this is easy to get using the **autopct** parameter. This parameter accepts Python string formatting, and we'll use the string **'%.1f%%'** to have percentages displayed with a precision of one decimal place. Let's break down this string formatting:\n",
        "\n",
        "<center><img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1Q6E-FXJCl4qVDplM3tM2n71i21eDk7vi\"></center>\n",
        "  \n",
        "  \n",
        "This is how the process looks for the Pos variable:\n",
        "\n",
        "```ptyhon\n",
        ">> wnba['Pos'].value_counts().plot.pie(figsize = (6,6), autopct = '%.1f%%')\n",
        "```\n",
        "\n",
        "<img width=\"300\" src=\"https://drive.google.com/uc?export=view&id=1KnC3jlcoXgEXKcWMzQvS2hS6kxewrfLY\">\n",
        "\n",
        "\n",
        "Notice that the percentages were automatically determined under the hood, which means we don't have to transform to percentages ourselves using **Series.value_counts(normalize = True) * 100.**\n",
        "\n",
        "Other display formats are possible, and more documentation on the the syntax of string formatting in Python can be found [here](https://docs.python.org/3/library/string.html#format-specification-mini-language). Documentation on **autopct** and other nice customization parameters can be found [here](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html).\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "- Generate and customize a pie chart to visualize the distribution of the **Exp_ordinal** variable.\n",
        "  - Generate a frequency table for the **Exp_ordinal** variable. Don't sort the table this time.\n",
        "  - Use the **Series.plot.pie()** method to generate the **pie plot.**\n",
        "      - Use the **figsize** parameter to specify a **width** and a **height** of 6 inches each.\n",
        "      - Use the **autopct** parameter to have percentages displayed with a precision of 2 decimal places.\n",
        "      - Add the following title to the plot: **Percentage of players in WNBA by level of experience.**\n",
        "      - Remove the **Exp_ordinal** label.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p-uW6s5KK_wz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yq85Vc9I5UDh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "outputId": "d5613d3c-3b30-499c-c375-daaad08c1bc1"
      },
      "source": [
        "wnba.Exp_ordinal.value_counts().iloc[[3,0,2,1,4]].plot(figsize=(6,6),\n",
        "                                                       kind='pie',\n",
        "                                                       autopct=\"%.2f%%\",\n",
        "                                                       title=\"Percentage of players in WNBA by level of experience\")\n",
        "plt.ylabel(\"\")\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nYII=\n",
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b764O3ERXpAz",
        "colab_type": "text"
      },
      "source": [
        "## 1.6 Histograms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r-SJ17IeYWRD",
        "colab_type": "text"
      },
      "source": [
        "Because of the special properties of variables measured on interval and ratio scales, we can describe distributions in more elaborate ways. Let's examine the **PTS** (total points) variable, which is discrete and measured on a ratio scale:\n",
        "\n",
        "```python\n",
        ">> wnba['PTS'].describe()\n",
        "count    143.000000\n",
        "mean     201.790210\n",
        "std      153.381548\n",
        "min        2.000000\n",
        "25%       75.000000\n",
        "50%      177.000000\n",
        "75%      277.500000\n",
        "max      584.000000\n",
        "Name: PTS, dtype: float64\n",
        "```\n",
        "\n",
        "We can see that 75% of the values are distributed within a relatively narrow interval (between 2 and 277), while the remaining 25% are distributed in an interval that's slightly larger.\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1eKJa7moOQBWYg5iswrL5KZv6ZHJXZeNJ\">\n",
        "\n",
        "\n",
        "To visualize the distribution of the **PTS** variable, we need to use a graph that allows us to see immediately the patterns outlined above. The most commonly used graph for this scenario is the **histogram**.\n",
        "\n",
        "To generate a histogram for the **PTS** variable, we can use the **Series.plot.hist()** method directly on the **wnba['PTS']** column (we don't have to generate a frequency table in this case):\n",
        "\n",
        "```python\n",
        ">> wnba['PTS'].plot.hist()\n",
        "```\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1Qa6ZdGR-918onl80zHS6ckoF5rMRuYOx\">\n",
        "\n",
        "In the next screen, we'll explain the statistics happening under the hood when we run **wnba['PTS'].plot.hist()** and discuss the histogram above in more detail. Until then, let's practice generating the histogram above ourselves.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "- Using **Series.plot.hist()**, generate a histogram to visualize the distribution of the **PTS** variable."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pgEQ4a3mYfQ1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rraOuLdI6uM8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "4df44771-3f99-42d2-9ac5-a98de9ff7411"
      },
      "source": [
        "wnba.PTS.plot.hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6e7b0c50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2DhxpCUcaDSY",
        "colab_type": "text"
      },
      "source": [
        "## 1.7 The Statistics Behind Histograms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Hvv7FCGaJ7P",
        "colab_type": "text"
      },
      "source": [
        "Under the hood, the **wnba['PTS'].plot.hist()** method:\n",
        "\n",
        "- Generated a grouped frequency distribution table for the **PTS** variable with ten class intervals.\n",
        "- For each class interval it plotted a bar with a height corresponding to the frequency of the interval.\n",
        "\n",
        "Let's examine the grouped frequency distribution table of the **PTS** variable:\n",
        "\n",
        "```python\n",
        ">> wnba['PTS'].describe()\n",
        "count    143.000000\n",
        "mean     201.790210\n",
        "std      153.381548\n",
        "min        2.000000\n",
        "25%       75.000000\n",
        "50%      177.000000\n",
        "75%      277.500000\n",
        "max      584.000000\n",
        "Name: PTS, dtype: float64\n",
        "```\n",
        "\n",
        "Each bar in the histogram corresponds to one class interval. To show this is true, we'll generate below the same histogram as in the previous screen, but this time:\n",
        "\n",
        "- We'll add the values of the x-ticks manually using the xticks parameter.\n",
        "  - The values will be the limits of each class interval.\n",
        "  - We use the [arange()](https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html?highlight=arange#numpy.arange) function from numpy to generate the values and avoid spending time with typing all the values ourselves.\n",
        "  - We start at 2, not at 1.417, because this is the actual minimum value of the first class interval (we discussed about this in more detail in the previous mission).\n",
        "- We'll add a **grid** line using the grid parameter to demarcate clearly each bar.\n",
        "- We'll rotate the tick labels of the x-axis using the rot parameter for better readability.\n",
        "\n",
        "```python\n",
        ">> from numpy import arange\n",
        ">> wnba['PTS'].plot.hist(grid = True, xticks = arange(2,585,58.2), rot = 30)\n",
        "```\n",
        "\n",
        "Looking on the histogram above, we can extract the same information as from the grouped frequency table. We can see that there are 20 players in the interval (176.6, 234.8], 10 players in the interval (351.2, 409.4], etc.\n",
        "\n",
        "More importantly, we can see the patterns we wanted to see in the last screen when we examined the output of **wnba['PTS'].describe()**.\n",
        "\n",
        "\n",
        "<img width=\"700\" src=\"https://drive.google.com/uc?export=view&id=1qQtYC5R9oylmOkpx_YjzpCZLv7cUo_5b\">\n",
        "\n",
        "\n",
        "\n",
        "From the output of **wnba['PTS'].describe()** we can see that most of the values (75%) are distributed within a relatively narrow interval (between 2 and 277). This tells us that:\n",
        "\n",
        "- The values are distributed unevenly across the 2 - 584 range (2 is the minimum value in the **PTS** variable, and 584 is the maximum).\n",
        "- Most values are clustered in the first (left) part of the the distribution's range.\n",
        "\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=178mhCdacbAzjXqwfDSbVZJtGQ0ucuqzW\">\n",
        "\n",
        "\n",
        "We can immediately see the same two patterns on the histogram above:\n",
        "\n",
        "- The distribution of values is uneven, with each class interval having a different frequency. If the distribution was even, all the class intervals would have the same frequency.\n",
        "- Most values (roughly three quarters) are clustered in the left half of the histogram.\n",
        "\n",
        "While it's easy and fast to make good estimates simply by looking at a histogram, it's always a good idea to add precision to our estimates using the percentile values we get from **Series.describe().**\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Examine the distribution of the **Games Played** variable using the **Series.describe()** method. Just from the output of this method, predict how the histogram of the **Games Played** variable should look like.\n",
        "- Once you have a good idea of what histogram shape to expect, plot a histogram for the **Games Played** variable using **Series.plot.hist()**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xlfkexABacrm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gUclCruaClng",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "89dcc02e-ab4b-4503-f0ee-8b7aa2688621"
      },
      "source": [
        "wnba[\"Games Played\"].plot(kind=\"hist\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6e728e48>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9eEpBoke7fNv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "2022558f-52db-4761-a556-d816cc3e9ee3"
      },
      "source": [
        "wnba[\"Games Played\"].describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    143.000000\n",
              "mean      24.356643\n",
              "std        7.104259\n",
              "min        2.000000\n",
              "25%       22.000000\n",
              "50%       27.000000\n",
              "75%       29.000000\n",
              "max       32.000000\n",
              "Name: Games Played, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S00PsOzNcslc",
        "colab_type": "text"
      },
      "source": [
        "## 1.8 Histograms as Modified Bar Plots\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ght-Oerqc1VZ",
        "colab_type": "text"
      },
      "source": [
        "It should now be clear that a histogram is basically the visual form of a grouped frequency table. Structurally, a histogram can also be understood as a modified version of a bar plot. The main difference is that in the case of a histogram there are no gaps between bars, and each bar represents an interval, not a single value.\n",
        "\n",
        "The main reason we remove the gaps between bars in case of a histogram is that we want to show that the class intervals we plot are adjacent to one another. With the exception of the last interval, the ending point of an interval is the starting point of the next interval, and we want that to be seen on the graph.\n",
        "\n",
        "<img width=\"300\" src=\"https://drive.google.com/uc?export=view&id=15v9hcTmgnSArcOD5jwZSlKJQTfwoVtHt\">\n",
        "\n",
        "For bar plots we add gaps because in most cases we don't know whether the unique values of ordinal variables are adjacent to one another in the same way as two class intervals are. It's safer to assume that the values are not adjacent, and add gaps.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1Bdl2qABVrU1nGjT1jIha-qwK7B62Caga\">\n",
        "\n",
        "\n",
        "For nominal variables, values can't be numerically ajdacent in principle, and we add gaps to emphasize that the values are fundamentally distinct.\n",
        "\n",
        "Below we summarize what we've learned so far:\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=19NxFZUcKvnQFnXvvAQl5xjOpnF_reJD-\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oST_wGnIdUeB",
        "colab_type": "text"
      },
      "source": [
        "## 1.9 Binning for Histograms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YLdUmyGtl_W-",
        "colab_type": "text"
      },
      "source": [
        "You might have noticed that **Series.plot.hist()** splits a distribution by default into 10 class intervals. In the previous mission, we learned that 10 is a good number of class intervals to choose because it offers a good balance between information and comprehensibility.\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1C8q5Zxpdkd_rILrIr4hqO7jCmoUgT10c\">\n",
        "\n",
        "With histograms, the breakdown point is generally larger than 10 because visualizing a picture is much easier than reading a grouped frequency table. However, once the number of class intervals goes over 30 or so, the granularity increases so much that for some intervals the frequency will be zero. This will result in a discontinued histogram from which is hard to discern patterns.\n",
        "\n",
        "Below, we can see how the histogram of the **PTS** variable changes as we vary the number of class intervals.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1yLJH1J-aXojOhzPg0FICmv6IQ9aXcpn8\">\n",
        "\n",
        "\n",
        "To modify the number of class intervals used for a histogram, we can use the **bins** parameter of **Series.plot.hist()**. A bin is the same thing as a class interval, and, when it comes to histograms, the term \"bin\" is used much more often.\n",
        "\n",
        "Also, we'll often want to avoid letting pandas work out the intervals, and use instead intervals that we think make more sense. We can do this in two steps:\n",
        "\n",
        "- We start with specifying the range of the entire distribution using the **range** parameter of **Series.plot.hist().**\n",
        "- Then we combine that with the number of bins to get the intervals we want.\n",
        "\n",
        "\n",
        "Let's say we want to get these three intervals for the distribution of the PTS variable:\n",
        "\n",
        "- [1, 200)\n",
        "- [200, 400)\n",
        "- [400, 600]\n",
        "\n",
        "If the histogram ranges from 1 to 600, and we specify that we want three bins, then the bins will automatically take the intervals above. This is because the bins must have equal interval lengths, and, at the same time, cover together the entire range between 1 and 600. To cover a range of 600 with three bins, we need each bin to cover 200 points, with the first bin starting at 1, and the last bin ending at 600.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1W8a-hbTW_ex0BI53go4xWvjKfMMP-WoO\">\n",
        "\n",
        "\n",
        "This is how we can generate a histogram with three bins and a 1 - 600 range for the **PTS** variable:\n",
        "\n",
        "```python\n",
        ">> wnba['PTS'].plot.hist(range = (1,600), bins = 3)\n",
        "```\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1O-MfgUUOn1oEfTn1elEkpru5E49XP04c\">\n",
        "\n",
        "\n",
        "If we keep the same range, but change to six bins, then we'll get these six intervals: [1, 100), [100, 200), [200, 300), [300, 400), [400, 500), [500, 600].\n",
        "\n",
        "\n",
        "```python\n",
        ">> wnba['PTS'].plot.hist(range = (1,600), bins = 6)\n",
        "```\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Generate a histogram for the **Games Played** variable, and customize it in the following way:\n",
        "  - Each bin must cover an interval of 4 games. The first bin must start at 1, the last bin must end at 32.\n",
        "  - Add the title \"The distribution of players by games played\".\n",
        "  - Add a label to the x-axis named \"Games played\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LiuEBsOlmC3U",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TxbBB8rZC5mk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "cd6f2ec5-0c19-4470-88ee-7bebdedbcc36"
      },
      "source": [
        "wnba[\"Games Played\"].plot.hist(range=(1,32),bins=8)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6ece6c50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fCSk8P3_ozOw",
        "colab_type": "text"
      },
      "source": [
        "## 1.10 Skewed Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FmI8zVJgo1ph",
        "colab_type": "text"
      },
      "source": [
        "There are a couple of histogram shapes that appear often in practice. So far, we've met two of these shapes:\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1kosNk32RFOru1alq7taeD9u4DWMWanoi\">\n",
        "\n",
        "\n",
        "In the histogram on the left, we can see that:\n",
        "\n",
        "- Most values pile up toward the endpoint of the range (32 games played).\n",
        "- There are less and less values toward the opposite end (0 games played).\n",
        "\n",
        "On the right histogram, we can see that:\n",
        "\n",
        "- Most values pile up toward the starting point of the range (0 points).\n",
        "- There are less and less values toward the opposite end.\n",
        "\n",
        "Both these histograms show **skewed distributions**. In a skewed distribution:\n",
        "\n",
        "- The values pile up toward the end or the starting point of the range, making up the body of the distribution.\n",
        "- Then the values decrease in frequency toward the opposite end, forming the tail of the distribution.\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1KR4lZFs4Z3D9GrEqpma9wRxRJbBvUzuC\">\n",
        "\n",
        "\n",
        "\n",
        "If the tail points to the left, then the distribution is said to be **left skewed**. When it points to the left, the tail points at the same time in the direction of negative numbers, and for this reason the distribution is sometimes also called **negatively skewed.**\n",
        "\n",
        "If the tail points to the right, then the distribution is **right skewed**. The distribution is sometimes also said to be **positively skewed** because the tail points in the direction of positive numbers.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1FIUz6XuJTcU74IHfJvJP6Il_JkUUXD3g\">\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Examine the distribution of the following two variables:\n",
        "  - **AST** (number of assists).\n",
        "  - **FT%** (percentage of free throws made out of all attempts).\n",
        "- Depending on the shape of the distribution, assign the string **'left skewed'** or **'right skewed'** to the following variables:\n",
        "  - **assists_distro** for the **AST** column.\n",
        "  - **ft_percent_distro** for the **FT%** column.\n",
        "\n",
        "For instance, if you think the **AST** variable has a right skewed distribution, your answer should be **assists_distro = 'right skewed'.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MsD16aFEo5P3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X5BSOBD8IZB0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "c14b569b-a955-422f-fc12-1e6bd2e2a0f4"
      },
      "source": [
        "wnba[\"AST\"].plot.hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6e9d6ba8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD8CAYAAAB6paOMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAD7dJREFUeJzt3X2sJXV9x/H3R0DBR0SuWwJsL1qi\npWlFeiU2ahu1WoTqro2lGGs3DXGbFFMNJu36kOo/TdakitpUKwpxtSo+IlRs67JFjUkr7CrlQaSL\nuLasC7s+FbAGBL7948zqdd27d/Zhzty9v/crOTkzc2bOfPeX2fvJb2bOb1JVSJLa9bCxC5Akjcsg\nkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXuyLEL6OP444+v2dnZscuQpMPKli1b\nvltVM4utd1gEwezsLJs3bx67DEk6rCT5dp/1PDUkSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQ\nSFLjDAJJapxBIEmNOyx+WXwwZtddNcp+t60/Z5T9StL+skcgSY0zCCSpcQaBJDXOIJCkxhkEktQ4\ng0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkho36DDUSbYB9wAPAg9U1VyS\n44CPAbPANuDcqvrBkHVIkhY2jR7Bc6vq9Kqa6+bXAZuq6lRgUzcvSRrJGKeGVgEbuukNwOoRapAk\ndYYOggI+n2RLkrXdshVVtaObvhNYMXANkqR9GPpRlc+uqu1JnghsTPKN+R9WVSWpvW3YBcdagJUr\nVw5cpiS1a9AeQVVt7953ApcDZwJ3JTkBoHvfucC2F1fVXFXNzczMDFmmJDVtsCBI8qgkj9k9DbwQ\nuAm4EljTrbYGuGKoGiRJixvy1NAK4PIku/fzkar6lyTXAR9Pcj7wbeDcAWuQJC1isCCoqtuBp+1l\n+feA5w+1X0nS/vGXxZLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIa\nZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEG\ngSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjRs8CJIckeRrST7bzZ+S5CtJbkvysSQPH7oG\nSdLCptEjeA1wy7z5twIXVdWvAD8Azp9CDZKkBQwaBElOAs4B3t/NB3ge8MlulQ3A6iFrkCTt29A9\ngncAfwk81M0/AfhhVT3Qzd8BnLi3DZOsTbI5yeZdu3YNXKYktWuwIEjy+8DOqtpyINtX1cVVNVdV\nczMzM4e4OknSbkcO+N3PAl6S5GzgaOCxwDuBY5Mc2fUKTgK2D1iDJGkRg/UIqur1VXVSVc0C5wH/\nVlWvAK4BXtattga4YqgaJEmLG+N3BH8FXJjkNibXDC4ZoQZJUmfIU0M/VVVfAL7QTd8OnDmN/UqS\nFucviyWpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLU\nuF5BkOTXhy5EkjSOvj2Cdye5NsmfJ3ncoBVJkqaqVxBU1XOAVwAnA1uSfCTJCwatTJI0Fb2vEVTV\nVuBNTB4s8zvAu5J8I8kfDFWcJGl4fa8R/EaSi4BbgOcBL66qX+2mLxqwPknSwPo+oezvgPcDb6iq\nH+9eWFXfSfKmQSqTJE1F3yA4B/hxVT0IkORhwNFV9X9V9aHBqpMkDa7vNYKrgWPmzT+yWyZJOsz1\nDYKjq+re3TPd9COHKUmSNE19g+BHSc7YPZPkN4Ef72N9SdJhou81gtcCn0jyHSDALwF/NFhVkqSp\n6RUEVXVdkqcCT+kW3VpVPxmuLEnStPTtEQA8A5jttjkjCVX1wUGqkiRNTa8gSPIh4MnA9cCD3eIC\nDAJJOsz17RHMAadVVQ1ZjCRp+vreNXQTkwvEkqRlpm+P4Hjg60muBe7bvbCqXrLQBkmOBr4EPKLb\nzyer6s1JTgEuA54AbAFeWVX3H2D9kqSD1DcI3nIA330f8LyqujfJUcCXk/wzcCFwUVVdluQfgPOB\n9xzA90uSDoG+zyP4IrANOKqbvg746iLb1LxfIx/VvYrJiKWf7JZvAFbvf9mSpEOl7zDUr2Lyx/u9\n3aITgc/02O6IJNcDO4GNwDeBH1bVA90qd3TfJUkaSd+LxRcAzwLuhp8+pOaJi21UVQ9W1enAScCZ\nwFP7FpZkbZLNSTbv2rWr72aSpP3UNwjum39BN8mRTE7z9FJVPwSuAX4LOLbbHiYBsX2BbS6uqrmq\nmpuZmem7K0nSfuobBF9M8gbgmO5ZxZ8A/mlfGySZSXJsN30M8AImTzi7BnhZt9oa4IoDKVySdGj0\nDYJ1wC7gRuDPgM8xeX7xvpwAXJPkBiYXlzdW1WeZPPP4wiS3MbmF9JIDKVySdGj0HXTuIeB93auX\nqroBePpelt/O5HqBJGkJ6DvW0LfYyzWBqnrSIa9IkjRV+zPW0G5HA38IHHfoy5EkTVvfH5R9b95r\ne1W9g8kD7SVJh7m+p4bOmDf7MCY9hP15loEkaYnq+8f8bfOmH2Ay3MS5h7waSdLU9b1r6LlDFyJJ\nGkffU0MX7uvzqnr7oSln+Zhdd9Vo+9623ss3kvrbn7uGngFc2c2/GLgW2DpEUZKk6ekbBCcBZ1TV\nPQBJ3gJcVVV/PFRhkqTp6DvExApg/lPE7u+WSZIOc317BB8Erk1yeTe/mslDZSRJh7m+dw39TfeY\nyed0i/60qr42XFmSpGnpe2oI4JHA3VX1TuCO7iH0kqTDXN9HVb6ZyfDRr+8WHQX841BFSZKmp2+P\n4KXAS4AfAVTVd4DHDFWUJGl6+gbB/VVVdENRJ3nUcCVJkqapbxB8PMl7mTxv+FXA1ezHQ2okSUtX\n37uG/rZ7VvHdwFOAv66qjYNWJkmaikWDIMkRwNXdwHP+8ZekZWbRU0NV9SDwUJLHTaEeSdKU9f1l\n8b3AjUk20t05BFBVfzFIVZKkqekbBJ/uXpKkZWafQZBkZVX9d1U5rpAkLVOLXSP4zO6JJJ8auBZJ\n0ggWC4LMm37SkIVIksaxWBDUAtOSpGVisYvFT0tyN5OewTHdNN18VdVjB61OkjS4fQZBVR0xrUIk\nSePYn+cRSJKWocGCIMnJSa5J8vUkNyd5Tbf8uCQbk2zt3h8/VA2SpMUN2SN4AHhdVZ0GPBO4IMlp\nwDpgU1WdCmzq5iVJIxksCKpqR1V9tZu+B7gFOBFYxc8efL8BWD1UDZKkxfUdYuKgJJkFng58BVhR\nVTu6j+4EViywzVpgLcDKlSuHL3IZmV131Sj73bb+nFH2K+ngDH6xOMmjgU8Br62qu+d/Nv+pZ3uq\nqouraq6q5mZmZoYuU5KaNWgQJDmKSQh8uKp2D1p3V5ITus9PAHYOWYMkad+GvGsowCXALVX19nkf\nXQms6abXAFcMVYMkaXFDXiN4FvBKJs8xuL5b9gZgPZNnIJ8PfBs4d8AaJEmLGCwIqurL/PygdfM9\nf6j9SpL2j78slqTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY2bylhDasNYYxyB4xxJB8MegSQ1ziCQ\npMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklq\nnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjBguCJJcm2ZnkpnnLjkuyMcnW7v3xQ+1f\nktTPkD2CDwBn7bFsHbCpqk4FNnXzkqQRDRYEVfUl4Pt7LF4FbOimNwCrh9q/JKmfaV8jWFFVO7rp\nO4EVU96/JGkPR46146qqJLXQ50nWAmsBVq5cObW6dHiaXXfVKPvdtv6cUfYrHUrT7hHcleQEgO59\n50IrVtXFVTVXVXMzMzNTK1CSWjPtILgSWNNNrwGumPL+JUl7GPL20Y8C/w48JckdSc4H1gMvSLIV\n+N1uXpI0osGuEVTVyxf46PlD7VOStP/8ZbEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklq3GhDTEjL\nwVhDW4DDW+jQsUcgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEG\ngSQ1ziCQpMYZBJLUOINAkhpnEEhS43wegXSYGutZCGM+B6HFf/M02COQpMYZBJLUOINAkhpnEEhS\n4wwCSWqcQSBJjRvl9tEkZwHvBI4A3l9V68eoQ5L6WO63rU69R5DkCODvgRcBpwEvT3LatOuQJE2M\ncWroTOC2qrq9qu4HLgNWjVCHJIlxguBE4H/mzd/RLZMkjWDJDjGRZC2wtpu9N8mtB/hVxwPfPTRV\nLWu2Uz/Nt1Pe2mu15tupp322U8+23pdf7rPSGEGwHTh53vxJ3bKfU1UXAxcf7M6SbK6quYP9nuXO\ndurHdurHdupnqbTTGKeGrgNOTXJKkocD5wFXjlCHJIkRegRV9UCSVwP/yuT20Uur6uZp1yFJmhjl\nGkFVfQ743JR2d9CnlxphO/VjO/VjO/WzJNopVTV2DZKkETnEhCQ1blkHQZKzktya5LYk68auZ6lI\nsi3JjUmuT7K5W3Zcko1Jtnbvjx+7zmlLcmmSnUlumrdsr+2SiXd1x9YNSc4Yr/LpWqCd3pJke3dM\nXZ/k7Hmfvb5rp1uT/N44VU9fkpOTXJPk60luTvKabvmSO6aWbRA4lMWinltVp8+7dW0dsKmqTgU2\ndfOt+QBw1h7LFmqXFwGndq+1wHumVONS8AF+sZ0ALuqOqdO764B0/+fOA36t2+bd3f/NFjwAvK6q\nTgOeCVzQtceSO6aWbRDgUBb7axWwoZveAKwesZZRVNWXgO/vsXihdlkFfLAm/gM4NskJ06l0XAu0\n00JWAZdV1X1V9S3gNib/N5e9qtpRVV/tpu8BbmEyisKSO6aWcxA4lMXCCvh8ki3dL7gBVlTVjm76\nTmDFOKUtOQu1i8fXL3p1d0rj0nmnFm0nIMks8HTgKyzBY2o5B4EW9uyqOoNJV/SCJL89/8Oa3Erm\n7WR7sF326T3Ak4HTgR3A28YtZ+lI8mjgU8Brq+ru+Z8tlWNqOQdBr6EsWlRV27v3ncDlTLrqd+3u\nhnbvO8ercElZqF08vuapqruq6sGqegh4Hz87/dN0OyU5ikkIfLiqPt0tXnLH1HIOAoey2Iskj0ry\nmN3TwAuBm5i0zZputTXAFeNUuOQs1C5XAn/S3enxTOB/53X3m7PHueyXMjmmYNJO5yV5RJJTmFwI\nvXba9Y0hSYBLgFuq6u3zPlp6x1RVLdsXcDbwX8A3gTeOXc9SeAFPAv6ze928u12AJzC5g2ErcDVw\n3Ni1jtA2H2VyWuMnTM7Pnr9QuwBhclfaN4Ebgbmx6x+5nT7UtcMNTP6gnTBv/Td27XQr8KKx659i\nOz2byWmfG4Dru9fZS/GY8pfFktS45XxqSJLUg0EgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQ\nSFLj/h9GOgNnDQJZ8gAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3rBobc-CJCXz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "ca2e9403-a03c-405c-982b-ba04b1e05129"
      },
      "source": [
        "wnba[\"FT%\"].plot.hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d717a4f98>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nZxBIUuP+F9WkIIvLXrbNAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZlvUdwpwrhM7",
        "colab_type": "text"
      },
      "source": [
        "## 1.11 Symmetrical Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uihaxRSVr3i9",
        "colab_type": "text"
      },
      "source": [
        "Besides skewed distributions, we often see histograms with a shape that is more or less symmetrical. If we draw a vertical line exactly in the middle of a symmetrical histogram, then we'll divide the histogram in two halves that are mirror images of one another.\n",
        "\n",
        "\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1FAOJOZTgCGv6FAQMfFH7ap2HjQok2ZEs\">\n",
        "\n",
        "\n",
        "If the shape of the histogram is **symmetrical**, then we say that we have a **symmetrical distribution.**\n",
        "\n",
        "A very common symmetrical distribution is one where the values pile up in the middle and gradually decrease in frequency toward both ends of the histogram. This pattern is specific to what we call a **normal distribution** (also called **Gaussian distribution**).\n",
        "\n",
        "\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=16AQYkLid4MnTqFLK8CID3wDWybbKvHgJ\">\n",
        "\n",
        "\n",
        "Another common symmetrical distribution is one where the values are distributed uniformly across the entire range. This pattern is specific to a **uniform distribution.**\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1WvoDjqD-S-W9qOkqaPt9o3JZs438T9TJ\">\n",
        "\n",
        "\n",
        "In practice, we rarely see perfectly **symmetrical distributions**. However, it's common to use perfectly symmetrical distributions as baselines for describing the distributions we see in practice. For instance, we'd describe the distribution of the **Weight** variable as resembling closely a normal distribution:\n",
        "\n",
        "```python\n",
        ">> wnba['Weight'].plot.hist()\n",
        "```\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1eoNnxKtW_V5PrdZ5V1P83_YKWKNh61bZ\">\n",
        "\n",
        "\n",
        "When we say that the distribution above resembles closely a normal distribution, we mean that most values pile up somewhere close to the middle and decrease in frequency more or less gradually toward both ends of the histogram.\n",
        "\n",
        "A similar reasoning applies to skewed distributions. We don't see very often clear-cut skewed distributions, and we use the left and right skewed distributions as baselines for comparison. For instance, we'd say that the distribution of the **BMI** variable is slightly **right skewed**:\n",
        "\n",
        "```python\n",
        ">> wnba['BMI'].plot.hist()\n",
        "```\n",
        "\n",
        "There's more to say about distribution shapes, and we'll continue this discussion in the next course when we'll learn new concepts. Until then, let's practice what we've learned.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Examine the distribution of the following variables, trying to determine which one resembles the most a normal distribution:\n",
        "  - Age\n",
        "  - Height\n",
        "  - MIN\n",
        "- Assign to the variable **normal_distribution** the name of the variable (as a string) whose distribution resembles the most a normal one.\n",
        "\n",
        "For instance, if you think the **MIN** variable is the correct answer, then your answer should be **normal_distribution = 'MIN'.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z4n3ShPswd_i",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LQIDw4V9ymtG",
        "colab_type": "text"
      },
      "source": [
        "## 1.12 Next Steps"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2R8PntqqysWf",
        "colab_type": "text"
      },
      "source": [
        "In this mission, we learned about the graphs we can use to visualize the distributions of various kinds of variables. If a variable is measured on a nominal or ordinal scale, we can use a bar plot or a pie chart. If the variable is measured on an interval or ratio scale, then a histogram is good choice.\n",
        "\n",
        "Here's the summary table once again to help you recollect what we did in this mission:\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=19NxFZUcKvnQFnXvvAQl5xjOpnF_reJD-\">\n",
        "\n",
        "\n",
        "We're one mission away from finishing the workflow we set out to complete in the first mission. Next, we'll continue the discussion about data visualization by learning how to compare frequency distributions using graphs.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1U88LilHa2asEN9vnC_PQFXz9UtjmRIzh\">"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "molRlwPZPt78",
        "colab_type": "text"
      },
      "source": [
        "# 2.0 Comparing Frequency Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s8I4cyo2QAxC",
        "colab_type": "text"
      },
      "source": [
        "## 2.1 Comparing Frequency Distributions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sFIzYqg_QJdC",
        "colab_type": "text"
      },
      "source": [
        "In the previous mission, we learned **what graphs we can use to visualize the frequency distribution of any kind of variable**. In this mission, we'll learn about the graphs we can use to **compare** multiple frequency distributions at once.\n",
        "\n",
        "We'll continue to work with the WNBA data set. Below are the first five rows to help you recollect its structure:\n",
        "\n",
        "| _ | Name            | Team | Pos | Height | Weight | BMI       | Birth_Place | Birthdate         | Exp_ordinal       |\n",
        "|---|-----------------|------|-----|--------|--------|-----------|-------------|-------------------|-------------------|\n",
        "| 0 | Aerial Powers   | DAL  | F   | 183    | 71.0   | 21.200991 | US          | January 17, 1994  | Little experience |\n",
        "| 1 | Alana Beard     | LA   | G/F | 185    | 73.0   | 21.329438 | US          | May 14, 1982      | Veteran           |\n",
        "| 2 | Alex Bentley    | CON  | G   | 170    | 69.0   | 23.875433 | US          | October 27, 1990  | Experienced       |\n",
        "| 3 | Alex Montgomery | SAN  | G/F | 185    | 84.0   | 24.543462 | US          | December 11, 1988 | Very experienced  |\n",
        "| 4 | Alexis Jones    | MIN  | G   | 175    | 78.0   | 25.469388 | US          | August 5, 1994    | Rookie            |\n",
        "\n",
        "\n",
        "Notice in the table above that we've kept the **Exp_ordinal** variable we created in the previous mission. To remind you, this variable is measured on an **ordinal scale** and describes the level of experience of a player according to the following labeling convention:\n",
        "\n",
        "\n",
        "| Years in WNBA | Label             |\n",
        "|---------------|-------------------|\n",
        "| 0             | Rookie            |\n",
        "| 1-3           | Little experience |\n",
        "| 4-5           | Experienced       |\n",
        "| 5-10          | Very experienced  |\n",
        "| >10           | Veteran           |\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zoiBp_j4WkjK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "f1fd0dd8-118a-43e4-ba13-0b83bfe11ace"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# read the dataset\n",
        "wnba = pd.read_csv(\"wnba.csv\")\n",
        "\n",
        "# cleaning the experience column\n",
        "wnba.loc[wnba.Experience == 'R',\"Experience\"] = 0\n",
        "wnba[\"Experience\"] = wnba[\"Experience\"].astype(int)\n",
        "\n",
        "# create exp_ordinal column\n",
        "wnba[\"Exp_ordinal\"] = pd.cut(wnba.Experience,\n",
        "       bins=[-1,0,3,5,10,100],\n",
        "       labels=[\"rookie\",\"Little experience\",\"Experienced\",\n",
        "              \"Very experienced\",\"Veteran\"])\n",
        "\n",
        "# verify the results\n",
        "wnba.Exp_ordinal.value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Little experience    42\n",
              "Very experienced     37\n",
              "Experienced          25\n",
              "rookie               23\n",
              "Veteran              16\n",
              "Name: Exp_ordinal, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GK6qbEZWWjs8",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "Let's say we're interested in analyzing how the distribution of the **Pos** variable (**player position**) varies with the level of experience. In other words, we want to determine, for instance, what are the positions on the court that rookies play most as, and how do rookies compare to veterans with respect to positions on the field.\n",
        "\n",
        "Here's a series of steps we can take to achieve that:\n",
        "\n",
        "- Segment the players in the data set by level of experience.\n",
        "- For each segment, generate a frequency distribution table for the **Pos** variable.\n",
        "- Analyze the frequency distributions comparatively.\n",
        "\n",
        "In the cell below, we've already done the first step for you and segmented the players in the data set by level of experience. The next two steps are left for you as an exercise.\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "- For each segment, generate a frequency distribution table for the **Pos** variable.\n",
        "  - For the **rookie** segment, assign the frequency distribution table to a variable named **rookie_distro**. tip: use df.value_counts() function.\n",
        "  - For the **Little experience** segment, assign the table to **little_xp_distro.**\n",
        "  - For the **Experienced** segment, assign the table to **experienced_distro.**\n",
        "  - For the **Very experienced** segment, assign the table to **very_xp_distro**.\n",
        "  - For the **Veteran** segment, assign the table to **veteran_distro.**\n",
        "- Print all the tables and analyze them comparatively to determine whether there are any clear patterns in the distribution of player position depending on the level of experience."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6D5-HZRuWYoV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "rookies = wnba[wnba['Exp_ordinal'] == 'rookie']\n",
        "little_xp = wnba[wnba['Exp_ordinal'] == 'Little experience']\n",
        "experienced = wnba[wnba['Exp_ordinal'] == 'Experienced']\n",
        "very_xp = wnba[wnba['Exp_ordinal'] == 'Very experienced']\n",
        "veterans =  wnba[wnba['Exp_ordinal'] == 'Veteran']\n",
        "\n",
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4TMORwxoM004",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        },
        "outputId": "2c967908-ea43-40f2-eca0-f5efb9988b12"
      },
      "source": [
        "rookies.Pos.value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "G      14\n",
              "C       4\n",
              "F       4\n",
              "F/C     1\n",
              "Name: Pos, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KxX0-BJyNaty",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "veterans.Pos.value_counts()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2FCO4tS1YHhj",
        "colab_type": "text"
      },
      "source": [
        "## 2.2 Grouped Bar Plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FUraFtkBYSnJ",
        "colab_type": "text"
      },
      "source": [
        "The purpose of the previous exercise was to give us a sense about how cumbersome really is to compare multiple distributions at once using frequency tables. Fortunately, we can make the comparison much quicker and more efficiently using graphs.\n",
        "\n",
        "All the five frequency tables we wanted to compare were for the **Pos** variable, which is measured on a nominal scale. Remember that one kind of graph we can use to visualize the distribution of a nominal variable is a bar plot. A simple solution to our problem is to generate a bar plot for each table, and then group all the bar plots on a single figure.\n",
        "\n",
        "This is where we'd like to arrive:\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1xO1mMfvHCMhgglqAI0FrCBE-sE9gt9PZ\">\n",
        "\n",
        "\n",
        "Because we grouped all the bar plots together, the graph above is called a **grouped bar plot**. We can generate a grouped bar plot just like the one above using the [seaborn.countplot()](https://seaborn.pydata.org/generated/seaborn.countplot.html) function from the seaborn module, which you might already be familiar with from our visualization lessons. In the code snippet below, we will:\n",
        "\n",
        "- Import the **seaborn** module with the alias **sns**.\n",
        "- Generate the plot with **sns.countplot()**. We'll use the following parameters for this function:\n",
        "  - **x** — specifies as a string the name of the column we want on the x-axis. We'll place the **Exp_ordinal** column on the x-axis.\n",
        "  - **hue** — specifies as a string the name of the column we want the bar plots generated for. We want to generate the bar plots for the **Pos** column.\n",
        "  - **data** - specifies the name of the variable which stores the data set. We stored the data in a variable named **wnba**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4v0P7J-NY3kx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 409
        },
        "outputId": "48d004e0-5dd5-4209-952e-bcc634b66abd"
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(16, 6))\n",
        "sns.countplot(x = 'Exp_ordinal', hue = 'Pos', data = wnba)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64e00358>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7AAAAF3CAYAAACcz6fnAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xu8XXV9J/zPl1xMuAma1BFiSLSF\nGQGJkBErAhVbgcdaxUfrpVaw2gwzSgURtFMfbXmePiPgBUcoljpAsQpaK3irKOUOAkIiSAJaLaBN\nVUDs2Iabgr/5Y+/Ew/Gc5CRk75118n6/XvuVtX577fX7nuS3TvZn/9Zeq1prAQAAgC3dNqMuAAAA\nAKZCgAUAAKATBFgAAAA6QYAFAACgEwRYAAAAOkGABQAAoBMEWAAAADpBgAUAAKATBFgAAAA6Yeao\nC5iKefPmtUWLFo26DAAAAAZg+fLlP2qtzd/Qdp0IsIsWLcpNN9006jIAAAAYgKr67lS2cwoxAAAA\nnSDAAgAA0AkCLAAAAJ3Qie/AAgAAbI1+9rOfZfXq1XnooYdGXcpmMWfOnCxYsCCzZs3apNcLsAAA\nAFuo1atXZ4cddsiiRYtSVaMu53FpreW+++7L6tWrs3jx4k3ah1OIAQAAtlAPPfRQnvzkJ3c+vCZJ\nVeXJT37y45pNFmABAAC2YNMhvK71eH8WARYAAIBOEGABAAC2AjNmzMiSJUuy11575ZWvfGUeeOCB\nUZe00QRYAACArcDcuXNz8803Z+XKlZk9e3Y+8pGPjLqkjTawAFtVZ1fVPVW1clz7MVX1zapaVVWn\nDKp/AAAAJnbggQfmO9/5TpLkAx/4QPbaa6/stddeOe2005Ik999/f1784hdnn332yV577ZVPfvKT\noyx3nUHeRufcJKcnOW9tQ1W9IMlLk+zTWnu4qn5lgP0DAAAwziOPPJIvfelLOeyww7J8+fKcc845\nueGGG9Jay/7775+DDz44d9xxR3bZZZd88YtfTJL85Cc/GXHVPQObgW2tXZXkx+Oa/2uS97bWHu5v\nc8+g+gcAAOAXHnzwwSxZsiRLly7NwoUL88Y3vjHXXHNNjjjiiGy33XbZfvvt8/KXvzxXX3119t57\n71xyySV5xzvekauvvjpPfOITR11+ksHOwE5k9yQHVtWfJ3koydtbazdOtGFVLUuyLEkWLlw4vAoB\nAHiMAz58wFD7u/aYa4faH2wt1n4Hdip23333rFixIn//93+fd73rXXnhC1+Yd7/73QOucMOGfRGn\nmUmelOS5SU5I8qma5EZArbWzWmtLW2tL58+fP8waAQAAtgoHHnhgLrroojzwwAO5//77c+GFF+bA\nAw/M97///Wy77bZ53etelxNOOCErVqwYdalJhj8DuzrJZ1prLcnXqurnSeYluXfIdQAAAGz19t13\n3xx11FF5znOekyR505velGc/+9n58pe/nBNOOCHbbLNNZs2alTPPPHPElfYMO8BelOQFSS6vqt2T\nzE7yoyHXAAAAsNVZs2bNhO1ve9vb8ra3ve0xbYceemgOPfTQYZS1UQYWYKvq/CS/kWReVa1O8p4k\nZyc5u39rnZ8mObI/GwsAAADrNbAA21p7zSRPvW5QfQIAADB9DfsiTgAAALBJBFgAAAA6QYAFAACg\nEwRYAAAAOmHYt9EBAABgE+13wnmbdX/LT339BreZMWNG9t5773XrF110URYtWrRZ65gqARYAAIBJ\nzZ07NzfffPOoy0jiFGIAAAA6wgwsAAAAk3rwwQezZMmSJMnixYtz4YUXjqwWARYAAIBJOYUYAAAA\nNpIACwAAQCc4hRgAAKAjpnLbm+nMDCwAAACTWrNmzahLWEeABQAAoBMEWAAAADpBgAUAAKATBFgA\nAAA6QYAFAACgEwRYAAAAOsF9YAEAADrieyftvVn3t/Ddt25wm7vvvjvHHXdcrr/++uy8886ZPXt2\nTjzxxBxxxBFJkv322y9f/epXs8cee2SHHXbIjBkzkiR/8Rd/kec973mbtV4BFgAAgAm11vKyl70s\nRx55ZD7xiU8kSb773e/mc5/7XJLkzjvvzK677ponPOEJSZLLL7888+bNG1g9TiEGAABgQpdddllm\nz56do48+el3bbrvtlmOOOSZJcvHFF+ewww4bWj0CLAAAABNatWpV9t1330mfHx9gX/CCF2TJkiXZ\nf//9B1KPU4gBAACYkje/+c255pprMnv27Fx77bVZvXp1nv70p6973inEAAAAjMSee+6ZFStWrFs/\n44wzcumll+bee+/N1Vdfnec///lDrUeABQAAYEKHHHJIHnrooZx55pnr2h544IEkvdOHDz/88KHW\n4xRiAACAjpjKbW82p6rKRRddlOOOOy6nnHJK5s+fn+222y4nn3xy3ve+9+Wkk04aaj0CLAAAAJN6\n6lOfmgsuuOAxbatXr865556buXPnrmu76667Bl6LU4gBAADYKAsWLMiXvvSlofcrwAIAANAJAwuw\nVXV2Vd1TVSsneO74qmpVNbjrKwMAADCtDHIG9twkh41vrKqnJXlRku8NsG8AAACmmYEF2NbaVUl+\nPMFTH0xyYpI2qL4BAACYfoZ6FeKqemmSf2mt3VJVG9p2WZJlSbJw4cIhVDc9HPDhA4be57XHXDv0\nPpn+hj2WjWMAgC3f0AJsVW2b5L+nd/rwBrXWzkpyVpIsXbrUbC0AALDV29wf8k/lQ/y77747xx13\nXK6//vrsvPPOmT17dk488cQcccQRm7WWqRjmVYifkWRxkluq6q4kC5KsqKr/MMQaAAAAmKLWWl72\nspfloIMOyh133JHly5fnggsuyOrVq0dSz9BmYFtrtyb5lbXr/RC7tLX2o2HVAAAAwNRddtllmT17\ndo4++uh1bbvttluOOeaYkdQzyNvonJ/kuiR7VNXqqnrjoPoCAABg81u1alX23XffUZexzsBmYFtr\nr9nA84sG1TcAAACb35vf/OZcc801mT17dm688cah9z/M78ACAADQIXvuuWdWrFixbv2MM87IpZde\nmnvvvXck9QiwAAAATOiQQw7JQw89lDPPPHNd2wMPPDCyeoZ6H1gAAAA23bDvXV9Vueiii3Lcccfl\nlFNOyfz587Pddtvl5JNPHmodawmwAAAATOqpT31qLrjgglGXkcQpxAAAAHSEAAsAAEAnCLAAAAB0\nggALAABAJwiwAAAAdIIACwAAQCe4jQ4AAEBHXHnQwZt1fwdfdeUGt/nhD3+YY489NjfeeGN22mmn\nPOUpT8lpp52W3XfffbPWMhUCLAAAABNqreWII47IkUceue5esLfcckvuvvtuARYAAIAtx+WXX55Z\ns2bl6KOPXte2zz77jKwe34EFAABgQitXrsx+++036jLWMQMLHbPfCecNvc/lp75+6H0CAMB4ZmAB\nAACY0J577pnly5ePuox1BFgAAAAmdMghh+Thhx/OWWedta7tG9/4Rq6++uqR1OMUYgAAgI6Yym1v\nNqeqyoUXXphjjz02J598cubMmZNFixbltNNOG2odawmwAAAATGqXXXbJpz71qVGXkcQpxAAAAHSE\nAAsAAEAnCLAAAAB0ggALAABAJwiwAAAAdIIACwAAQCe4jQ4AAEBHnH785zfr/t7y/pdscJsZM2Zk\n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\nq+qwqvpWVX2nqt45ihoAAADolqEH2KqakeSMJIcneWaS11TVM4ddBwAAAN0yihnY5yT5Tmvtjtba\nT5NckOSlI6gDAACADqnW2nA7rHpFksNaa2/qr/9+kv1ba28Zt92yJMv6q3sk+dZQC936zEvyo1EX\nAZuBscx0YBwzXRjLTAfG8XDs1lqbv6GNZg6jkk3RWjsryVmjrmNrUVU3tdaWjroOeLyMZaYD45jp\nwlhmOjCOtyyjOIX4X5I8bcz6gn4bAAAATGoUAfbGJL9WVYuranaSVyf53AjqAAAAoEOGfgpxa+2R\nqnpLki8nmZHk7NbaqmHXwS9xujbThbHMdGAcM10Yy0wHxvEWZOgXcQIAAIBNMYpTiAEAAGCjCbAA\nAAB0ggDLY1TVmgnadqmqT4+iHrYsk4yPo6vq9f3lo6pqlzHPHVtV245Zv6uq5g2n2o1XVUur6n+O\nug62HFX1aFXdPObxzgH39zuD7mM9fW/Rxyc9VXV5VR06ru3YqjpzVDVtLsY/m9PGHitVtVNV/bfh\nVMfj4Tuw01hVVXr/xj/fiNesaa1tP8Cy6LANjY+quiLJ21trN/XX70qytLX2o4nWtyRVNbO19sio\n62DLMszfiaMeg1vy8ckvVNWyJL/eWnvDmLbrk5zYWrtqCq/f6PcGw2D8s7lt7LFSVYuSfKG1ttdG\n9LFFHk/TnRnYaaaqFlXVt6rqvCQrk/x+Vd1aVSur6uQx271movYxz8+rquuq6sX9fa7st8+oqlOr\n6saq+kZV/Zfh/XRsiarqT6vq7VX1iiRLk3y8P1P11iS7JLm8qi6f4HWvq6qv9bf9y6qaMcE2+1XV\nlVW1vKq+XFVPraqZ/fH3G/1t/kdV/Xl/+a6qOqU/tr9WVb/ab59fVX/Xf92NVXXAmNo/VlXXJvlY\nVf1GVX2h/9x2VXV2fz9fr6qX9tuPqqrPVNXFVfXtqjplTL2HVdWKqrqlqi5d337orqp6Yv/37B79\n9fOr6g/7y2uq6oNVtaqqLq2q+f32Z/THzPKqurqq/mO//dyq+khV3ZDklP74Or3/3PrG7dlVdUVV\n3VFVfzSmttf3fzffUlUf28B+nlxVX+nX+tEkNby/RR6HTyd5cfVuRbj2TfcuSa7ur58w5v/oP1u7\nzbj3Bv9PVZ22dodV9YdV9cHxHVXVi/rvBVZU1d9W1fbGPx0y6bEy0XGS5L1JnlG99yWn9l8zlePp\naVV1ZlXd1B9Pa/e39n3Jn/WPoVvXjn0ep9aaxzR6JFmU5OdJnpveQfq9JPPTu2XSZUleNll7//Vr\nkjwlyQ1JfmvMPlf2l5cleVd/+QlJbkqyeNQ/t8fQxteaCdr+NL1Z1yS5Ir1PsNc+d1eSeePXk/yn\nJJ9PMqvf/hdJXj9uv7OSfDXJ/P76q9K77VaS7Jnk9iS/meTrSWaP2f+f9Jdfn94nqUnyiSTP7y8v\nTHL7mNqXJ5nbX/+NMa/5/5O8rr+8U5J/TLJdkqOS3JHkiUnmJPlukqf1j6d/Xns8JHnS+vYz6n9L\njymP+UeT3Dzm8ap++28luS69e5lfPGb7luT3+svvTnJ6f/nSJL/WX94/yWX95XOTfCHJjP76UWNe\ns75x+9X0fgfPS3Jf/3jZsz++5o0bg5Pt538meXd/+cX92uc93r8zj6GMyy8keWl/+Z1J3tdfflF6\nt/uo9CYpvpDkoIx5b9Dfbvsk/5Rf/A7+apK9x/UxL8lVa39fJXnHmPFi/Ht04jHRsbKB42TlmNdO\n6XgaN95mpPde6Fn99buSHNNf/m9JPjrqv5Pp8Bj6fWAZiu+21q6v3kzPFa21e5Okqj6e3oHXJmm/\nKL3/BC5N8ubW2pUT7PtFSZ5Vvdm2pPcm/teS3DnIH4hp54VJ9ktyY1Ulydwk94zbZo8keyW5pL/N\njCQ/SJLW2qr+p+tfSO/0oJ+Oed35Y/5cO6Pwm0me2d9PkuxYVWtPC/1ca+3BCWp8UZLfqaq399fn\npPfmJ0kuba39JEmq6rYkuyXZOclVrbU7+zX+eAP7uX3ivxq2MA+21paMb2ytXVJVr0xyRpJ9xjz1\n8ySf7C//TZLP9Mfa85L87Zgx+IQxr/nb1tqjE/S9vnH7xdbaw0kerqp70vvg8ZD+vn7Ur/HHG9jP\nQUle3t/2i1X1r+v/q2ALcn564fGz/T/f2G9/Uf/x9f769un9H/299N8bJElrbU1VXZbkt6vq9vSC\n7K3j+nhukmcmubY/dmanF1qNf7pkomPlNZn8OBlrSsdT3+9W75TlmUmemt6x843+c5/p/7k8/THH\n4yPATk/3P47XPpLeAXZokokCbKX3SdKXH0cfUEn+urX2xxvYZlVr7dcneX7vJP87ya+Ma28TLG+T\n3ielDz2mg94bmsmOl0ryf7fWvjXuNfsneXhM06NZ/+/SCfdDt1XVNumdSfBAeh9erJ5k05be+Pvf\nEwXhvsnG4PrG7caMwfXth276bJIPVtW+SbZtrS3vt1eS/9Fa+8uxG/dPnRw/zj6a5L8n+WaScybo\no5Jc0lp7zS89YfzTHb90rFTVazP5cfKYpvVsd/+Y9cVJ3p7kP7fW/rWqzk3vw+q11o7XDY1Vpsh3\nYKe3ryU5uHrfZ52R3idOV65WifcGAAAFgUlEQVSnPen9Z/MHSf5jVb1jgn1+Ocl/rapZSVJVu1fV\ndoP+QeiMf0+yw3rW17o0ySuq6leSpKqeVFW7jdvmW0nmV9Wv97eZVVV79pdfnuRJ6X2C/uGq2mnM\n61415s/r+stfSXLM2g2qarI3UmN9Ockx1X+XU1XP3sD21yc5qP8fWarqSZu4H7rhuPRm0V+b5Jy1\nvxPT+3917Rkqr01yTWvt35Lc2Z+xSvXsM36HE9jYcXtZkldW1ZP7268dg5Pt56p+jamqw9MLInRA\na21NksuTnJ1fnHWS9H7f/MHamcqq2nXt79kJ9nFDel9/eO24fax1fZID6hfXEtiuqnbvP2f80wmT\nHCuTHSfj37NM9XjaMb1A+5OqekqSwwfyw7COADuNtdZ+kN75/pcnuSXJ8tbaZydrH/O6R9MLtYfU\nL19O/KNJbkuyonoXdvrL+DRpa7JtVa0e83jbuOfPTfKR6l0AYW563x25uMZdxKm1dluSdyX5SlV9\nI8kl6Z1yM3abn6b3Rujkqrolve8fPq96tzl4b5I3tdb+McnpST405qU79/f51vTeZCXJHyVZWr2L\nMNyW5Ogp/Kz/b3qn1H+jqlb11yfVPyV/WXqnzN2SX5xGt1H7YYsztx57G533Vu/iNW9Kcnxr7er0\n3gi/q7/9/Ume0//9eEiSk/rtv5fkjf2xsSrJVC7mtVHjtrW2KsmfJ7my388HNrCfP0vvQ5dV6Z3W\nNv70ObZs56d3+u668Nla+0p63/m8rqpuTe8iNhN9iLjWp5Jc21r7pdNn+7/Tjkpyfv936nXpfbht\n/NM1jzlWJjtOWmv3pXfK/MqqOnWqx1Nr7Zb0TjP+Zn/7a4fwM23V3EYHmDbKbRAYsXIrMjqkeldd\n/2Br7dLNtD/jHxg4M7AAAFuRqtqpqv4xvYuUbZbwCjAsZmABAADoBDOwAAAAdIIACwAAQCcIsAAA\nAHSCAAsAAEAnCLAAsAFV9ei4+8G+cwuoaU3/z12q6tOPYz9XVNXSzVcZAAzOzFEXAAAd8GBrbcmo\nOq+qma21RyZ6rrX2/SSvGHJJADASZmABYBNU1ROr6ltVtUd//fyq+sP+8pqq+mBVraqqS6tq/nr2\ns6Sqrq+qb1TVhVW1c7/9iqo6rapuSvLWqlpcVddV1a1V9f+Nef2iqlrZXz6qqj5TVRdX1ber6pQx\n251ZVTf1a/qzAf21AMBACbAAsGFzx51C/KrW2k+SvCXJuVX16iQ7t9b+qr/9dkluaq3tmeTKJO9Z\nz77PS/KO1tqzktw6btvZrbWlrbX3J/lQkjNba3sn+cF69rckyauS7J3kVVX1tH77n7TWliZ5VpKD\nq+pZG/MXAABbAgEWADbswdbakjGPTyZJa+2S9ELnGUneNGb7nyf5ZH/5b5I8f6KdVtUTk+zUWruy\n3/TXSQ4as8knxywfkOT8/vLH1lPrpa21n7TWHkpyW5Ld+u2/W1Urknw9yZ5JnrmefQDAFkmABYBN\nVFXbJPlPSR5IsvN6Nm2b2MX9m7Cfh8csP5pkZlUtTvL2JC/sz/R+McmcTawJAEZGgAWATXdcktuT\nvDbJOVU1q9++TX5xYaXXJrlmohf3T0P+16o6sN/0++mdcjyRa5O8ur/8extZ547pheGfVNVTkhy+\nka8HgC2CqxADwIbNraqbx6xfnOSc9E4bfk5r7d+r6qok70rvO6z3J3lOVb0ryT3pfSd1Mkcm+UhV\nbZvkjiRvmGS7tyb5RFW9I8lnN6b41totVfX1JN9M8s/phWEA6JxqbVPPagIAJlJVa1pr24+6DgCY\nbpxCDAAAQCeYgQWAIaiqM9K7kvBYH2qtnTOKegCgiwRYAAAAOsEpxAAAAHSCAAsAAEAnCLAAAAB0\nggALAABAJ/wfkqeTyC425oYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 1152x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k5l-98_BN7NE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "d1cbde22-1964-46df-be33-ec578dfcb634"
      },
      "source": [
        "wnba[[\"Exp_ordinal\",\"Pos\"]].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Exp_ordinal</th>\n",
              "      <th>Pos</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Little experience</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Veteran</td>\n",
              "      <td>G/F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Experienced</td>\n",
              "      <td>G</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Very experienced</td>\n",
              "      <td>G/F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>rookie</td>\n",
              "      <td>G</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         Exp_ordinal  Pos\n",
              "0  Little experience    F\n",
              "1            Veteran  G/F\n",
              "2        Experienced    G\n",
              "3   Very experienced  G/F\n",
              "4             rookie    G"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R8LC7UkfjF6W",
        "colab_type": "text"
      },
      "source": [
        "Comparing the **five distributions** is now easier, and we can make a couple of observations:\n",
        "\n",
        "- There's only one **rookie** playing on a combined position **(F/C)**. This is significantly less compared to more experienced players, which suggests that combined positions (**F/C** and **G/F**) may require more complex skills on the field that rookies rarely have.\n",
        "- Rookies are the only category where we don't find players on all positions. We can see there are no rookies who play on a G/F position.\n",
        "- Guards predominate for every level of experience. This probably means that most players in a basketball team are guards. It's worth examining the distributions of a couple of teams to find whether this is true. If it's true, it might be interesting to find out why teams need so many guards.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Usng **sns.countplot()**, generate a grouped bar plot similar to the one above.\n",
        "\n",
        "  - Place the **Exp_ordinal** variable on the x-axis.\n",
        "  - Generate the bar plots for the **Pos** variable. The data set is stored in **wnba** variable.\n",
        "  - Using the **order** parameter of **sns.countplot()**, order the values on the x-axis in **descending** order. The **order** parameter takes in a list of strings, so you should use **order = ['Veteran', 'Very experienced', ..........]**.\n",
        "  - Using the **hue_order** parameter, order the bars of each bar plot in ascending alphabetic order. **hue_order** takes in a list of strings, so you can use **hue_order = ['C', 'F', ......].**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S_fKRx8HjzNs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o4wtk8zWQ9aG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 409
        },
        "outputId": "350dae1b-7315-4668-dd13-2cd237afdd1e"
      },
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(16, 6))\n",
        "\n",
        "sns.countplot(x = 'Exp_ordinal', hue = 'Pos', data = wnba,\n",
        "              order = ['rookie', 'Little experience', 'Experienced', 'Very experienced', 'Veteran'],\n",
        "              hue_order = ['C', 'F', 'F/C', 'G', 'G/F']\n",
        "             )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64c33390>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 93
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nGQBgYw0twFbVtkn+e3qnD29Qa+3MJGcmydKlS83WAgAAW739PrLfZt3ftUdfu8FtZsyYkT333HPd\n+oUXXphFixYlSfbZZ5989atfzc9+9rMcd9xx+cd//MfssMMO2X777XPSSSdl33333az1DnMG9llJ\nFidZO/u6IMmKqnpea+1HQ6wDAACAKZo7d25uvvnmX2q/4447svPOO+cJT3hCjjjiiCxevDjf+c53\nss022+SOO+7IbbfdttlrGVqAba3dmuRX1q5X1Z1JlrbWfjysGgAAANg8Lr744hx66KH553/+59xw\nww35xCc+kW226V1mafHixVm8ePFm73OQt9E5L8l1SXarqtVV9aZB9QUAAMBgPPDAA1myZEmWLFmS\nww8/fF372gC7atWqLFmyJDNmzBh4LQObgW2tvXYDzy8aVN8AAABsHhOdQvzwww9n9erVeeYzn5mV\nK1cOrZZB3gcWAACAaejqq6/OC1/4wiTJ7rvvnltuuSWPPvrowPsVYAEAANgoF198cQ477LAkybOe\n9awsXbo0733ve9Na7wYyd955Zy666KLN3u9Q7wMLAADAppvKbW+G4YorrsiJJ564bv1jH/tYjjvu\nuPzqr/5q5s6dm3nz5uWUU07Z7P0KsAAAAExqzZo1j1lfvXp15s2bl7lz565re9KTnpS//uu/Hngt\nTiEGAABgyhYsWJAvfelLI+lbgAUAAKATBFgAAAA6QYAFAACgEwRYAAAAOkGABQAAoBPcRgcAAKAj\nrjzgwM26vwOvunKD29x111059thjc/3112fHHXfM7Nmzc8IJJ+Twww/frLVMhRlYAAAAJtRay8tf\n/vIccMABuf3227N8+fKcf/75Wb169UjqEWABAACY0GWXXZbZs2fnqKOOWte2yy675Oijjx5JPQIs\nAAAAE1q1alX23nvvUZexju/AAhv0/RP3HHqfC99z69D7BABg/d7ylrfkmmuuyezZs3PjjTcOvX8z\nsAAAAExo9913z4oVK9atn3766bn00ktzzz33jKQeARYAAIAJHXTQQXnwwQdzxhlnrGu7//77R1aP\nU4gBAAA6Yiq3vdmcqioXXnhhjj322Jx88smZP39+tttuu5x00klDrWMtARYAAIBJPf3pT8/5558/\n6jKSOIUYAACAjhBgAQAA6AQBFgAAgE4QYAEAAOgEARYAAIBOEGABAADoBLfRAQAA6IjTjvvCZt3f\n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\nagAAAKBbhh5gq2pGktOTHJbk2UleW1XPHnYdAAAAdMsoZmCfl+S7rbXbW2sPJzk/yctGUAcAAAAd\nUq214XZY9cokh7bW3txf//0k+7bW3jpuu2VJlvVXd0vy7aEWuvWZl+THoy4CNgNjmenAOGa6MJaZ\nDozj4diltTZ/QxvNHEYlm6K1dmaSM0ddx9aiqm5qrS0ddR3weBnLTAfGMdOFscx0YBxvWUZxCvG/\nJnnGmPUF/TYAAACY1CgC7I1Jfq2qFlfV7CSvSfL5EdQBAABAhwz9FOLW2iNV9dYkX04yI8lZrbVV\nw66DX+J0baYLY5npwDhmujCWmQ6M4y3I0C/iBAAAAJtiFKcQAwAAwEYTYAEAAOgEAZbHqKo1E7Tt\nVFWfGUU9bFkmGR9HVdUb+stHVtVOY547pqq2HbN+Z1XNG061G6+qllbV/xx1HWw5qurRqrp5zONd\nA+7vdwbdx3r63qKPT3qq6vKqOmRc2zFVdcaoatpcjH82p409Vqpqh6r6b8OpjsfDd2Cnsaqq9P6N\nf74Rr1nTWnviAMuiwzY0PqrqiiTvaK3d1F+/M8nS1tqPJ1rfklTVzNbaI6Ougy3LMN8TRz0Gt+Tj\nk1+oqmVJfr219sYxbdcnOaG1dtUUXr/Rnw2Gwfhnc9vYY6WqFiX5Ymttj43oY4s8nqY7M7DTTFUt\nqqpvV9W5SVYm+f2qurWqVlbVSWO2e+1E7WOen1dV11XVS/r7XNlvn1FVp1TVjVX1jar6L8P76dgS\nVdWfVtU7quqVSZYm+UR/puptSXZKcnlVXT7B615fVV/rb/tXVTVjgm32qaorq2p5VX25qp5eVTP7\n4+83+tv8j6r68/7ynVV1cn9sf62qfrXfPr+q/r7/uhurar8xtX+8qq5N8vGq+o2q+mL/ue2q6qz+\nfr5eVS/rtx9ZVZ+tqour6jtVdfKYeg+tqhVVdUtVXbq+/dBdVfXk/vvsbv3186rqD/vLa6rqQ1W1\nqqourar5/fZn9cfM8qq6uqr+U7/9nKr6aFXdkOTk/vg6rf/c+sbtWVV1RVXdXlV/NKa2N/Tfm2+p\nqo9vYD9Praqv9Gv9WJIa3t8ij8NnkrykerciXPuhe6ckV/fXjx/zf/Sfrd1m3GeD/6eqTl27w6r6\nw6r60PiOqurF/c8CK6rq76rqicY/HTLpsTLRcZLkfUmeVb3PJaf0XzOV4+kZVXVGVd3UH09r97f2\nc8mf9Y+hW9eOfR6n1prHNHokWZTk50men95B+v0k89O7ZdJlSV4+WXv/9WuSPC3JDUl+a8w+V/aX\nlyV5d3/5CUluSrJ41D+3x9DG15oJ2v40vVnXJLkivd9gr33uziTzxq8n+c9JvpBkVr/9L5O8Ydx+\nZyX5apL5/fVXp3fbrSTZPck3k/xmkq8nmT1m/3/SX35Der9JTZJPJnlhf3lhkm+OqX15krn99d8Y\n85q/SPL6/vIOSf4pyXZJjkxye5InJ5mT5HtJntE/nv5l7fGQ5Cnr28+o/y09pjzmH01y85jHq/vt\nv5XkuvTuZX7xmO1bkt/rL78nyWn95UuT/Fp/ed8kl/WXz0nyxSQz+utHjnnN+sbtV9N7D56X5N7+\n8bJ7f3zNGzcGJ9vP/0zynv7yS/q1z3u8f2ceQxmXX0zysv7yu5K8v7/84vRu91HpTVJ8MckBGfPZ\noL/dE5P8c37xHvzVJHuO62NekqvWvl8leeeY8WL8e3TiMdGxsoHjZOWY107peBo33mak91noOf31\nO5Mc3V/+b0k+Nuq/k+nwGPp9YBmK77XWrq/eTM8VrbV7kqSqPpHegdcmab8wvf8ELk3yltbalRPs\n+8VJnlO92bak9yH+15LcMcgfiGnn4CT7JLmxqpJkbpK7x22zW5I9klzS32ZGkh8mSWttVf+3619M\n7/Sgh8e87rwxf66dUfjNJM/u7ydJnlRVa08L/Xxr7YEJanxxkt+pqnf01+ek9+EnSS5trf00Sarq\ntiS7JNkxyVWttTv6Nf5kA/v55sR/NWxhHmitLRnf2Fq7pKpeleT0JHuNeernST7VX/7bJJ/tj7UX\nJPm7MWPwCWNe83ettUcn6Ht94/ai1tpDSR6qqrvT+8XjQf19/bhf4082sJ8Dkryiv+1FVfVv6/+r\nYAtyXnrh8XP9P9/Ub39x//H1/voT0/s/+vvpfzZIktbamqq6LMlvV9U30wuyt47r4/lJnp3k2v7Y\nmZ1eaDX+6ZKJjpXXZvLjZKwpHU99v1u9U5ZnJnl6esfON/rPfbb/5/L0xxyPjwA7Pd33OF77SHoH\n2CFJJgqwld5vkr78OPqASvI3rbU/3sA2q1prvz7J83sm+d9JfmVce5tgeZv0flP64GM66H2gmex4\nqST/d2vt2+Nes2+Sh8Y0PZr1v5dOuB+6raq2Se9MgvvT++XF6kk2bemNv/89URDum2wMrm/cbswY\nXN9+6KbPJflQVe2dZNvW2vJ+eyX5H621vxq7cf/UyfHj7GNJ/nuSbyU5e4I+KsklrbXX/tITxj/d\n8UvHSlW9LpMfJ49pWs92941ZX5zkHUn+z9bav1XVOen9snqtteN1Q2OVKfId2Onta0kOrN73WWek\n9xunK9fTnvT+s/mDJP+pqt6iMEVIAAAFdUlEQVQ5wT6/nOS/VtWsJKmqXatqu0H/IHTGfyTZfj3r\na12a5JVV9StJUlVPqapdxm3z7STzq+rX+9vMqqrd+8uvSPKU9H6D/pGq2mHM61495s/r+stfSXL0\n2g2qarIPUmN9OcnR1f+UU1XP3cD21yc5oP8fWarqKZu4H7rh2PRm0V+X5Oy174np/b+69gyV1yW5\nprX270nu6M9YpXr2Gr/DCWzsuL0syauq6qn97deOwcn2c1W/xlTVYekFETqgtbYmyeVJzsovzjpJ\neu83f7B2prKqdl77PjvBPm5I7+sPrxu3j7WuT7Jf/eJaAttV1a7954x/OmGSY2Wy42T8Z5apHk9P\nSi/Q/rSqnpbksIH8MKwjwE5jrbUfpne+/+VJbkmyvLX2ucnax7zu0fRC7UH1y5cT/1iS25KsqN6F\nnf4qfpu0Ndm2qlaPebx93PPnJPlo9S6AMDe9745cXOMu4tRauy3Ju5N8paq+keSS9E65GbvNw+l9\nEDqpqm5J7/uHL6jebQ7el+TNrbV/SnJakg+PeemO/X2+Lb0PWUnyR0mWVu8iDLclOWoKP+v/m94p\n9d+oqlX99Un1T8lflt4pc7fkF6fRbdR+2OLMrcfeRud91bt4zZuTHNdauzq9D8Lv7m9/X5Ln9d8f\nD0pyYr/995K8qT82ViWZysW8NmrcttZWJfnzJFf2+/ngBvbzZ+n90mVVeqe1jT99ji3beemdvrsu\nfLbWvpLedz6vq6pb07uIzUS/RFzr00muba390umz/fe0I5Oc139PvS69X24b/3TNY46VyY6T1tq9\n6Z0yv7KqTpnq8dRauyW904y/1d/+2iH8TFs1t9EBpo1yGwRGrNyKjA6p3lXXP9Rau3Qz7c/4BwbO\nDCwAwFakqnaoqn9K7yJlmyW8AgyLGVgAAAA6wQwsAAAAnSDAAgAA0AkCLAAAAJ0gwAIAANAJAiwA\nbEBVPTrufrDv2gJqWtP/c6eq+szj2M8VVbV081UGAIMzc9QFAEAHPNBaWzKqzqtqZmvtkYmea639\nIMkrh1wSAIyEGVgA2ARV9eSq+nZV7dZfP6+q/rC/vKaqPlRVq6rq0qqav579LKmq66vqG1V1QVXt\n2G+/oqpOraqbkrytqhZX1XVVdWtV/X9jXr+oqlb2l4+sqs9W1cVV9Z2qOnnMdmdU1U39mv5sQH8t\nADBQAiwAbNjccacQv7q19tMkb01yTlW9JsmOrbW/7m+/XZKbWmu7J7kyyXvXs+9zk7yztfacJLeO\n23Z2a21pa+0DST6c5IzW2p5Jfrie/S1J8uokeyZ5dVU9o9/+J621pUmek+TAqnrOxvwFAMCWQIAF\ngA17oLW2ZMzjU0nSWrskvdB5epI3j9n+50k+1V/+2yQvnGinVfXkJDu01q7sN/1NkgPGbPKpMcv7\nJTmvv/zx9dR6aWvtp621B5PclmSXfvvvVtWKJF9PsnuSZ69nHwCwRRJgAWATVdU2Sf5zkvuT7Lie\nTdsmdnHfJuznoTHLjyaZWVWLk7wjycH9md6LkszZxJoAYGQEWADYdMcm+WaS1yU5u6pm9du3yS8u\nrPS6JNdM9OL+acj/VlX795t+P71TjidybZLX9Jd/byPrfFJ6YfinVfW0JIdt5OsBYIvgKsQAsGFz\nq+rmMesXJzk7vdOGn9da+4+quirJu9P7Dut9SZ5XVe9Ocnd630mdzBFJPlpV2ya5PckbJ9nubUk+\nWVXvTPK5jSm+tXZLVX09ybeS/Et6YRgAOqda29SzmgCAiVTVmtbaE0ddBwBMN04hBgAAoBPMwALA\nEFTV6eldSXisD7fWzh5FPQDQRQIsAAAAneAUYgAAADpBgAUAAKATBFgAAAA6QYAFAACgE/5/rs+P\nElxdXJAAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 1152x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4WXoWBidk3e9",
        "colab_type": "text"
      },
      "source": [
        "## 2.3 Challenge: Do Older Players Play Less?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YoFzcAMEpHe3",
        "colab_type": "text"
      },
      "source": [
        "When players get past a certain age, they become less and less physically fit as they get older. Intuitively, the fitness level of a player should directly affect how much she plays in a season. On average, a WNBA player played approximately 497 minutes in the 2016-2017 season:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o8V9Ucd3pQMO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "7cf7f049-0780-40f1-b951-4becfe916254"
      },
      "source": [
        "wnba['MIN'].mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "496.97202797202794"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Glt-LLCJpSLi",
        "colab_type": "text"
      },
      "source": [
        "Let's hypothesize that older players generally play less than this average of 497 minutes, while younger players generally play more. As a benchmark to distinguish between younger and older players, we'll take the mean age of players in our sample, which is approximately 27:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rl37jGIapau8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "56b61cc2-ae62-4b44-e742-12b3c53a33f3"
      },
      "source": [
        "wnba['Age'].mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "27.076923076923077"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "37-K5Vrepghb",
        "colab_type": "text"
      },
      "source": [
        "To test our hypothesis, we can generate a grouped bar plot to examine the frequency distribution of younger and older players that played under the average or as much as the average or above. Our hypothesis predicts that we should see a grouped bar plot that looks similar to this:\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=11S_m6RQAGChN_iOy7mS1qoEjCOWSEBDV\">\n",
        "\n",
        "\n",
        "To generate a graph like the one above, we'll first need to create two new variables:\n",
        "\n",
        "- An ordinal variable which labels each player as \"young\" or \"old\". If the player is 27 or over, we'll label her \"old\", otherwise the label is \"young\".\n",
        "- An ordinal variable which describes whether the minutes played is below or above average (or equal to the average). If a player played 497 minutes or more, we'll assign her the label \"average or above\", otherwise we'll assign \"below average\".\n",
        "\n",
        "In the code below, we'll use **lambda** functions to describe quickly the labeling logic above and **Series.apply()** to apply the **lambda** functions on the **Age** and **MIN** columns. We'll name the two resulting columns **age_mean_relative** and **min_mean_relative**.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jf0Bew4Pp7EU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "fad1eaf4-de22-48b6-a823-adfa7cd88454"
      },
      "source": [
        "wnba['age_mean_relative'] = wnba['Age'].apply(lambda x: 'old' if x >= 27 else 'young')\n",
        "wnba['min_mean_relative'] = wnba['MIN'].apply(lambda x: 'average or above' if x >= 497 else\n",
        "                                              'below average')\n",
        "cols = [\"Name\",\"Age\",\"age_mean_relative\",\"MIN\",\"min_mean_relative\"]\n",
        "wnba[cols].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>age_mean_relative</th>\n",
              "      <th>MIN</th>\n",
              "      <th>min_mean_relative</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Aerial Powers</td>\n",
              "      <td>23</td>\n",
              "      <td>young</td>\n",
              "      <td>173</td>\n",
              "      <td>below average</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alana Beard</td>\n",
              "      <td>35</td>\n",
              "      <td>old</td>\n",
              "      <td>947</td>\n",
              "      <td>average or above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Alex Bentley</td>\n",
              "      <td>26</td>\n",
              "      <td>young</td>\n",
              "      <td>617</td>\n",
              "      <td>average or above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Alex Montgomery</td>\n",
              "      <td>28</td>\n",
              "      <td>old</td>\n",
              "      <td>721</td>\n",
              "      <td>average or above</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Alexis Jones</td>\n",
              "      <td>23</td>\n",
              "      <td>young</td>\n",
              "      <td>137</td>\n",
              "      <td>below average</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              Name  Age age_mean_relative  MIN min_mean_relative\n",
              "0    Aerial Powers   23             young  173     below average\n",
              "1      Alana Beard   35               old  947  average or above\n",
              "2     Alex Bentley   26             young  617  average or above\n",
              "3  Alex Montgomery   28               old  721  average or above\n",
              "4     Alexis Jones   23             young  137     below average"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ifhDhs76rp_k",
        "colab_type": "text"
      },
      "source": [
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Generate a grouped bar plot to confirm or reject our hypothesis. Using **sns.countplot()**:\n",
        "  - Place the **age_mean_relative** variable on the x-axis. The **age_mean_relative** and **min_mean_relative** are already defined.\n",
        "  - Generate the frequency distributions for the **min_mean_relative variable.**\n",
        "- Analyze the graph and determine whether the data confirms or rejects our hypothesis. If it's a confirmation assign the string **'confirmation'** to a variable named **result**. If it's a rejection, assign the string **'rejection'** to the variable **result.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gesr-86PvZxu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "loy1GuoMSfQx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "outputId": "e478d71c-857a-46eb-faa5-2e4890c80a45"
      },
      "source": [
        "sns.countplot(x = 'age_mean_relative', hue = 'min_mean_relative', data = wnba)\n",
        "result = 'rejection'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zQNpeRmKvfa7",
        "colab_type": "text"
      },
      "source": [
        "## 2.4 Comparing Histograms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3wbt6EU4wBm8",
        "colab_type": "text"
      },
      "source": [
        "Contrary to what our hypothesis predicted, the grouped bar plot we built showed that among old players the \"average or above\" category is the most numerous. Among young players we saw an opposite pattern: there are more players who played below the average number of minutes.\n",
        "\n",
        "A shortcoming of our analysis so far is that the **min_mean_relative** variable doesn't show much granularity. We can see that more **old players** belong to the **\"average or above\"** category than to **\"below average\"**, but we can't tell, for instance, whether **old players** generally play much more than the average. For all we know, they could have all played exactly 497 minutes (which is the average).\n",
        "\n",
        "The **min_mean_relative** variable is ordinal, and it was derived from the **MIN** variable, which is measured on a ratio scale. The information provided by the **MIN** variable is much more granular, and we can plot the distribution of this variable instead. Because the **MIN** variable is measured on a ratio scale, we'll need to use histograms instead of bar plots.\n",
        "\n",
        "The easiest way to **compare two histograms** is to superimpose one on top of the other. We can do that by using the pandas visualization methods we learned in the previous mission:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TMnltjWRw7qn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "c0678545-1f50-4fb1-f793-74a8041c00bf"
      },
      "source": [
        "wnba[wnba.Age >= 27]['MIN'].plot.hist(label = 'Old', legend = True)\n",
        "wnba[wnba.Age < 27]['MIN'].plot.hist(label = 'Young', legend = True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64ae3940>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nsgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QnQWaVZGxB1U",
        "colab_type": "text"
      },
      "source": [
        "We can now see that most of the **old players** that belong to the **\"average or above\"** category play significantly more than average. The main downside of the visualization above is that the histogram for **young players** covers a large part of the other histogram. We can fix this easily by plotting only the shape of the histograms. We can do this using the **histtype** parameter and choose the **'step'** type:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tbee7KFnxnHE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "42164c72-9acd-4812-d03a-bea1361cf8d3"
      },
      "source": [
        "sns.set_style(\"white\")\n",
        "wnba[wnba.Age >= 27]['MIN'].plot.hist(histtype = 'step', label = 'Old', legend = True,color=\"red\")\n",
        "wnba[wnba.Age < 27]['MIN'].plot.hist(histtype = 'step', label = 'Young', legend = True,color=\"blue\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64a98898>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD8CAYAAAB6paOMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAGfhJREFUeJzt3Xt0TWf+x/HPISIIKobE7Ze41FSD\nGENdYkwFhwqVRGitma4KM9QgTNAOqmvVcmlnGbpmaiE1Rq+zRiVloaoV9/t1TFUY02JEJSqNCHKR\nY//+oBmp2xHZe8vZ79daWXJ2zjnPd58nzifP3vs8j8swDEMAAMeqZHcBAAB7EQQA4HAEAQA4HEEA\nAA5HEACAwxEEAOBwBAEAOBxBAAAORxAAgMP52V2ANzp16qRGjRrZXQYAVChnz57Vnj177nu/ChEE\njRo1Umpqqt1lAECFEhcX59X9ODQEAA5HEACAwxEEAOBwFeIcAQDcybVr15SRkaGCggK7S7FVQECA\nGjdurCpVqpTp8QQBgAorIyNDNWvWVFhYmFwul93l2MIwDGVnZysjI0NNmzYt03OYdmhoypQp6tKl\ni/r371+y7c0331Tfvn01YMAAjRkzRpcuXTKreQAOUFBQoLp16zo2BCTJ5XKpbt26DzUqMi0I4uLi\ntGTJklLbIiMjtWbNGq1evVphYWFavHixWc0DcAgnh8APHvY1MC0IOnbsqNq1a5fa1q1bN/n53Tga\n1a5dO2VmZprVPADAS7ZdNZSSkqLu3bvb1TwAXxQWJrlc5fcVFnbfJjMzMzV69Gi53W716tVLM2fO\nVFFRkfbs2aNRo0bd8TFRUVH6/vvvy3ffH4ItJ4sXLlyoypUr69lnn7WjeQAVVViYdPr0/26vWydd\nufK/26dPS/v2lV97HTtK+/dL/v5S27a3/dgwDI0dO1ZDhw7VwoUL5fF4NH36dM2fP19PP/10+dVh\nMsuDIDU1VZs3b9ayZcs4tgfgwZw+LRnG/26np0utWpW+T4cO5dtmhw43wuAOdu/erapVq2rQoEGS\npMqVK2vq1Knq2bOnOnfuXHK/nJwcTZw4UVlZWWrXrp2MW/fhEWDpoaGtW7dqyZIlWrhwoapVq2Zl\n0wBQ7k6cOKHw8PBS2wIDA9WgQQOdvmXksmDBArVv315r165V79699e2331pd6j2ZNiJISkrS3r17\nlZOTo+7du2vcuHFKTk5WUVGREhISJEkRERGaMWOGWSUAwCNh3759evvttyVJTz/99G0X0tjNtCCY\nN2/ebdsGDx5sVnMAYLkWLVpo/fr1pbZdvnxZ586dU2hoqHbs2GFTZQ+GuYYAoIy6dOmi/Px8rVy5\nUpLk8Xj0xhtvKDY2VgEBASX369ixo1avXi1J2rJli3Jzc22p924IAgC+IzS0fC8fDQ29Z3Mul0sL\nFizQZ599JrfbrT59+qhq1apKSkoqdb8xY8Zo//79io6O1hdffKGGDRua+So8MOYaAuA7Tp2yvMkG\nDRpo0aJFt23v1KmTOnXqJEmqU6eOli5danVpXmNEAAAORxAAgMMRBADgcAQBADgcQQAADkcQAIDD\nEQQAfIbVs1AbhqGhQ4dqy5YtJdvWrVunESNGmLqf5Y3PEQDwGT+enPRh3W+CZJfLpddff13jx49X\n586dVVxcrPnz59+2OuOjjiAAgIfQsmVL9ejRQ++8846uXr2qgQMH6v/+7//0zjvvaNWqVZKk5557\nTi+88IJOnz6txMTEku3JyckqLi7W7373Ow0dOlQ///nPtXv3buXl5WnOnDlq3769rl69qldeeUVf\nf/21WrRooYyMDM2aNUutfjz99kNwRBD8eC0Lq4SG2vJBR8Bcdv2Hku475YNdxo4dq9jYWPn7+ysl\nJUWHDx/W6tWrtWLFChUXF2vw4MF66qmnSs0/dCeGYWjFihVKS0vTggUL9Ne//lUffPCBfvKTn+gv\nf/mLjh07ptjY2HKv3xFBUN7DRW+x7g58kl3/oR5h1atXV79+/VS9enX5+/vrwIEDcrvdJW/8vXr1\n0v79+9WtW7d7Po/b7ZYktW7dWmfPnpUkHThwQL/97W8lSU888YRatGhR7vVzshgAykGlSpVUqdK9\n31IrV66s69evl9wuLCws9XN/f/+S5/J4POVf5F0QBABQzjp06KANGzaooKBAV65cUVpamjp06KB6\n9erp/Pnzys3NVWFhoTZv3nzf52rfvr3WrVsnSTp+/Li+/vrrcq/XEYeGADjDD7NQl+fzlUXbtm0V\nHR2t+Ph4SdLQoUP105/+VJL00ksvadCgQQoODvbqMM+vf/1rvfLKK+rXr59atGih5s2bKzAwsGyF\n3YXLeNRWUb6DuLg4paamlvnxLpd95wge/VcXeECP0C92enp6uV49c1f7999YxN4GxcXF8ng8qlq1\nqk6dOqXhw4fr888/l59f6b/j7/RaePveyYgAAB5hV69e1bBhw1RcXCzDMDRjxozbQuBhEQQA8Air\nVavWQx0R8QYniwFUaBXg6LbpHvY1IAgAVFgBAQHKzs52dBgYhqHs7Oz7fljtXjg0BKDCaty4sTIy\nMvTdd9+Z29CFC1J6urltPISAgAA1bty4zI8nCABUWFWqVFHTpk3Nb+jJJx+ZK6XMwKEhAHA4ggAA\nHM60IJgyZYq6dOmi/v37l2y7ePGiEhIS5Ha7lZCQoNzcXLOaBwB4ybQgiIuLu21xhuTkZHXp0kWf\nf/65unTpouTkZLOaBwB4ybQg6Nixo2rXrl1qW1pammJiYiRJMTEx2rBhg1nNAwC8ZOk5guzsbNWv\nX1+SVK9ePWVnZ1vZPADgDmw7WexyueRi5RYAsJ2lQVC3bl2dP39eknT+/HkFBQVZ2TwA4A4sDYKo\nqCitXLlSkrRy5Ur17NnTyuYBAHdgWhAkJSXp+eef18mTJ9W9e3d9/PHHGjlypHbs2CG3262dO3dq\n5MiRZjUPAPCSaVNMzJs3747b3333XbOaBACUAZ8sBgCHIwgAwOEIAgBwOIIAAByOIAAAhyMIAMDh\nCAIAcDiCAAAcjiAAAIcjCADA4QgCAHA4gsAXhYVJLpf1X2Fhdu85gDIwbdI52Oj0ackwrG+XhYaA\nCokRAQA4HEEAAA5HEACAwxEEAOBwBAEAOBxBAAAORxAAgMMRBADgcAQBADgcQQAADkcQAIDDEQQA\n4HC2TDq3bNkyffzxx3K5XGrZsqXmzJmjqlWr2lEKADie5SOCrKwsvffee0pJSdGaNWvk8Xi0du1a\nq8sAANxky6Ehj8ejgoICFRcXq6CgQPXr17ejDACAbDg0FBwcrOHDh6tHjx6qWrWqIiMj1a1bN6vL\nAADcZPmIIDc3V2lpaUpLS9O2bduUn5+vVatWmdfgD6tm2bFil03CdNKW3XXJYFE0E7HwHMxi+Yhg\n586daty4sYKCgiRJbrdbhw4d0sCBA81p8PTpG//asmKX9U1K0mmF2bK7crksf52dtCgaC8/BLJaP\nCBo2bKjDhw8rPz9fhmFo165dat68udVlAABusnxEEBERoT59+ig2NlZ+fn5q1aqVnnvuOavLAADc\nZMvnCBITE5WYmGhH0wCAH/Hq0NDx48fNrgMAYBOvRgSvv/66ioqKFBsbq2effVY1a9Y0uy4AgEW8\nCoKPPvpIp06dUkpKiuLi4tS2bVvFxcUpMjLS7PoAACbz+hxBWFiYJkyYoNatW2vmzJk6evSoDMNQ\nUlKS3G63mTUCAEzkVRAcO3ZMqamp2rJli7p27apFixYpPDxcWVlZev755wkCAKjAvAqCmTNnKj4+\nXklJSQoICCjZHhwcrPHjx5tWHADAfF4FweLFixUQEKDKlStLkq5fv67CwkJVq1ZNMTExphYIADCX\nV5ePJiQkqKCgoOR2fn6+EhISTCsKAGAdr4KgsLBQNWrUKLldo0YN5efnm1YUAMA6XgVBtWrV9NVX\nX5XcPnLkSKlzBQCAisurcwRTp07V+PHjVb9+fRmGoQsXLmj+/Plm1wYAsIBXQdC2bVutW7dOJ0+e\nlCQ1bdpUVapUMbUwAIA1vP5A2ZdffqmzZ8/K4/Ho6NGjksQVQ/cRqlNyucJsaVeyvl07hIbaM19+\naKh06pT17ZYSFva/9TZMZZR+kUNDLWgTVvIqCCZPnqwzZ87oiSeeKLmE1OVyEQT3cUpNbVpJpKkk\nO1amsZ5db8aPxGItVq1U45I9v8ewjFdBcOTIEX366adyPRK//QCA8uTVVUOPP/64vvvuO7NrAQDY\nwKsRQU5OjqKjo9W2bdtSJ4kXLVpkWmEAAGt4FQTjxo0zuw4AgE28CoKnnnpKZ8+e1enTp9W1a1fl\n5+fL4/GYXRsAwAJenSNYvny5EhMT9dprr0mSsrKyNGbMGFMLAwBYw6sg+PDDD/X3v/9dgYGBkm4s\nUvP999+bWhgAwBpeBYG/v7/8/f1LbhcXF5tWEADAWl6dI+jYsaMWLVqkgoIC7dixQx999JGioqLM\nrg0AYAGvRgSTJk1SUFCQWrZsqX/84x/65S9/qQkTJphdGwDAAl6NCCpVqqQhQ4ZoyJAhZtcDALCY\nV0EQFRV1x+kl0tLSyr0gAIC1vAqClJSUku+Lioq0bt065ebmlrnRS5cu6dVXX9W///1vuVwuzZ49\nWz/72c/K/HwAgLLz6hxBnTp1Sr6Cg4M1bNgwbdmypcyNzpo1S7/4xS/02WefadWqVWrevHmZnwsA\n8HC8GhHcukzl9evXdeTIkTJfQpqXl6d9+/bpjTfekHT7pakAAGt5FQQ/vGlLkp+fnxo1aqS33nqr\nTA1mZGQoKChIU6ZM0bFjxxQeHq5p06apevXqZXo+PELsWiXGBqE6afmiQ05bD8aydXducdcFh+z8\n3bZgFSSvguD9998vtwaLi4t19OhRTZ8+XREREZo5c6aSk5O5HNUX2L5kl3VO/fCNy8WiLSaxat2d\nW931vd7O320LAsirIPjb3/52z58nJCR43WBISIhCQkIUEREhSerbt6+Sk5O9fjwAoHx5vULZl19+\nWfJp4k2bNqlNmzYKCwt74Abr1aunkJAQffPNN2rWrJl27drFyWIAsJFXQZCZmanU1NSSSefGjh2r\nUaNGae7cuWVqdPr06Zo0aZKuXbumJk2aaM6cOWV6HgDAw/MqCC5cuFDqyh5/f39duHChzI22atVK\nqampZX48AKD8eBUEMTExio+PV+/evSVJGzZsUGxsrKmFAQCs4VUQjB49Wt27d9f+/fslSXPmzNGT\nTz5pamEAAGt49cliScrPz1dgYKBefPFFhYSE6MyZM2bWBQCwiFdB8Pbbb2vJkiUll3leu3ZNkydP\nNrUwAIA1vAqCL774QgsXLlS1atUkScHBwbpy5YqphQEArOFVEFSpUkUul6tkKuqrV6+aWhQAwDpe\nnSx+5pln9Nprr+nSpUtavny5UlJSWKQGAHyEV0EwYsQI7dixQzVq1NDJkyeVmJioyMhIs2sDAFjg\nvkHg8Xg0bNgwvf/++7z5A4APuu85gsqVK6tSpUrKy8uzoh4AgMW8OjRUvXp1DRgwQF27di21bsCr\nr75qWmEAAGt4FQRut1tut9vsWgAANrhnEHz77bdq2LAh8woBd2P3ylUWNWPHLjptRTY73fMcwZgx\nY0q+HzdunOnFABXOqVM3ltGy48uiVbPs2kUHLXhnu3sGgXHLOnHMLQQAvumeQeC6ZTzocsii5ADg\nNPc8R3Ds2DG1b99ehmGosLBQ7du3l3RjpOByuXTw4EFLigQAmOeeQZCenm5VHQAAm3i9HgEAwDcR\nBADgcAQBADgcQQAADkcQAIDDEQQA4HAEAQA4nG1B4PF4FBMTo1GjRtlVAgBANgbBe++9p+bNm9vV\nPADgJluCIDMzU5s3b1Z8fLwdzQMAbmFLEMyePVuTJ09WpUqcogAAu1n+Trxp0yYFBQWpdevWVjcN\nAPf0wyI8Vn+Fhdm7314tVVmeDh48qI0bN2rr1q0qLCzU5cuXNWnSJM2dO9fqUgCgFLsWw7F7ln/L\ng2DixImaOHGiJGnPnj1aunQpIQAANuIgPQA4nOUjglt16tRJnTp1srMEAHA8RgQA4HAEAQA4HEEA\nAA5HEACAwxEEAOBwBAEAOBxBAAAORxAAgMMRBADgcAQBADgcQQAADkcQAIDD2TrpnM/7YZULO9oF\nAC8RBGaya5ULAHgAHBoCAIcjCADA4QgCAHA4ggAAHI4gAACHIwgAwOEIAgBwOIIAAByOIAAAhyMI\nAMDhCAIAcDiCAAAczvJJ586dO6eXX35Z2dnZcrlcGjJkiF588UWrywAA3GR5EFSuXFl/+MMfFB4e\nrsuXL2vQoEGKjIxUixYtrC4FACAbDg3Vr19f4eHhkqTAwEA1a9ZMWVlZVpcBALjJ1nMEGRkZSk9P\nV0REhJ1lAICj2RYEV65cUWJioqZOnarAwEC7ygAAx7MlCK5du6bExEQNGDBAbrfbjhIAADdZHgSG\nYWjatGlq1qyZEhISrG4eAPAjlgfBgQMHtGrVKu3evVsDBw7UwIEDtWXLFqvLAADcZPnlox06dNDx\n48etbhYAcBd8shgAHI4gAACHIwgAwOEIAgBwOIIAAByOIAAAhyMIAMDhCAIAcDiCAAAcjiAAAIcj\nCADA4QgCAHA4ggAAHI4gAACHIwgAwOEIAgBwOIIAAByOIAAAhyMIAMDhCAIAcDiCAAAcjiAAAIcj\nCADA4QgCAHA4ggAAHM6WINi6dav69Omj3r17Kzk52Y4SAAA3WR4EHo9HM2bM0JIlS7R27VqtWbNG\n//nPf6wuAwBwk+VB8K9//UuhoaFq0qSJ/P39FR0drbS0NKvLAADcZHkQZGVlKSQkpOR2cHCwsrKy\nrC4DAHCTn90FeOPs2bOKi4sr24NjYxWrOJX14QBgtthY3f096p4/vLezZ896dT/LgyA4OFiZmZkl\nt7OyshQcHHzPx+zZs8fssgDAsSw/NNSmTRudOnVKZ86cUVFRkdauXauoqCirywAA3GT5iMDPz0+v\nvfaafvOb38jj8WjQoEF6/PHHrS4DAHCTyzAMw+4iAAD24ZPFAOBwBAEAOJxPBYEvTl1x7tw5vfDC\nC+rXr5+io6P17rvvSpIuXryohIQEud1uJSQkKDc3V5JkGIZmzpyp3r17a8CAAfrqq6/sLP+heDwe\nxcTEaNSoUZKkM2fOaPDgwerdu7cmTJigoqIiSVJRUZEmTJig3r17a/DgwcrIyLCz7DK5dOmSEhMT\n1bdvXz3zzDM6dOiQz/fxsmXLFB0drf79+yspKUmFhYU+18dTpkxRly5d1L9//5JtZenXTz75RG63\nW263W5988kn5F2r4iOLiYqNnz57Gf//7X6OwsNAYMGCAceLECbvLemhZWVnGkSNHDMMwjLy8PMPt\ndhsnTpww3nzzTWPx4sWGYRjG4sWLjT/+8Y+GYRjG5s2bjREjRhjXr183Dh06ZMTHx9tW+8NaunSp\nkZSUZIwcOdIwDMNITEw01qxZYxiGYUyfPt348MMPDcMwjA8++MCYPn26YRiGsWbNGmP8+PH2FPwQ\nXn75ZWP58uWGYRhGYWGhkZub69N9nJmZafTo0cPIz883DONG36akpPhcH+/du9c4cuSIER0dXbLt\nQfs1JyfHiIqKMnJycoyLFy8aUVFRxsWLF8u1Tp8ZEfjq1BX169dXeHi4JCkwMFDNmjVTVlaW0tLS\nFBMTI0mKiYnRhg0bJKlku8vlUrt27XTp0iWdP3/etvrLKjMzU5s3b1Z8fLykG38t7d69W3369JEk\nxcbGlvTvxo0bFRsbK0nq06ePdu3aJaMCXQORl5enffv2leyrv7+/atWq5fN97PF4VFBQoOLiYhUU\nFKhevXo+18cdO3ZU7dq1S2170H7dvn27IiMj9dhjj6l27dqKjIzUtm3byrVOnwkCJ0xdkZGRofT0\ndEVERCg7O1v169eXJNWrV0/Z2dmSbn8dQkJCKuTrMHv2bE2ePFmVKt34Fc3JyVGtWrXk53fjiudb\n9ysrK0sNGjSQdOPy5Jo1ayonJ8eewssgIyNDQUFBmjJlimJiYjRt2jRdvXrVp/s4ODhYw4cPV48e\nPdStWzcFBgYqPDzcZ/v4Vg/ar1a8t/lMEPi6K1euKDExUVOnTlVgYGCpn7lcLrlcLpsqK3+bNm1S\nUFCQWrdubXcpliguLtbRo0c1dOhQrVy5UtWqVbvtHJev9XFubq7S0tKUlpambdu2KT8/v9z/yq0I\nHpV+9ZkgKMvUFRXFtWvXlJiYqAEDBsjtdkuS6tatW3I44Pz58woKCpJ0++uQmZlZ4V6HgwcPauPG\njYqKilJSUpJ2796tWbNm6dKlSyouLpZUer+Cg4N17tw5STfeVPPy8lSnTh3b6n9QISEhCgkJUURE\nhCSpb9++Onr0qE/38c6dO9W4cWMFBQWpSpUqcrvdOnjwoM/28a0etF+teG/zmSDw1akrDMPQtGnT\n1KxZMyUkJJRsj4qK0sqVKyVJK1euVM+ePUttNwxD//znP1WzZs2SYWhFMXHiRG3dulUbN27UvHnz\n1LlzZ/3pT39Sp06dtH79ekk3rqL4oX+joqJKrqRYv369Onfu/Ej8leWtevXqKSQkRN98840kadeu\nXWrevLlP93HDhg11+PBh5efnyzAM7dq1Sy1atPDZPr7Vg/Zrt27dtH37duXm5io3N1fbt29Xt27d\nyrUmn/pk8ZYtWzR79uySqStGjx5td0kPbf/+/frVr36lli1blhwvT0pKUtu2bTVhwgSdO3dODRs2\n1FtvvaXHHntMhmFoxowZ2rZtm6pVq6bZs2erTZs2Nu9F2e3Zs0dLly7V4sWLdebMGf3+979Xbm6u\nWrVqpblz58rf31+FhYWaPHmy0tPTVbt2bc2fP19NmjSxu/QHkp6ermnTpunatWtq0qSJ5syZo+vX\nr/t0H//5z3/Wp59+Kj8/P7Vq1UqzZs1SVlaWT/VxUlKS9u7dq5ycHNWtW1fjxo1Tr169HrhfV6xY\nocWLF0uSXnrpJQ0aNKhc6/SpIAAAPDifOTQEACgbggAAHI4gAACHIwgAwOEIAgBwOIIAAByOIAAA\nhyMIAMDh/h/AVis2mazzsgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1co9KIQKxp8Y",
        "colab_type": "text"
      },
      "source": [
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Looking on our graph above, it's not easy to visualize where the average number of minutes is. Using the [plt.axvline()](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axvline.html) function, add a vertical line to demarcate the average point:\n",
        "  - The vertical line should be at point 497 on the x-axis.\n",
        "  - Use the label parameter of **plt.axvline()** to label it **'Average'**. Display the label by running **plt.legend()**."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9UD1sMoGyZ-v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "utg7nV9OTGAK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "98366631-8db7-4792-f337-0a3735b99114"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "wnba[wnba.Age >= 27]['MIN'].plot.hist(histtype = 'step', label = 'Old', legend = True)\n",
        "wnba[wnba.Age < 27]['MIN'].plot.hist(histtype = 'step', label = 'Young', legend = True)\n",
        "plt.axvline(497, label = 'Average')\n",
        "plt.legend()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f3d650359b0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 100
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nzJs3jwPH0/lwwSvMmTPHNftoWaIgEBH5lV27dlGpUiX69+8PQPny5Rk/fjw9evSgU6dOrudlZGQw\natQo0tLSaNu2LaXg/tzfZI8gmNMKsn40v13/2+H5r8xvV8SDSnqo5tfefLA2+cmZRbZ9efmxV3lz\nTmt+9913tGjRosg2X19fateuzfHjx13b5s6dS7t27Rg2bBibNm1i+fLlptRX0uwRBFk/wuQs89ud\n7H/954iUMlcO1XhCUlISzX81/GPFtBLu2Lt3L6+//joA3bp1u2qd9tJCVw2JiPxKkyZN+Prrr4ts\nO3fuHCdPnuSOO+6wqCrPURCIiPxK586dyc7OZuXKlQAUFhYya9Ys+vXrh7e3t+t5HTp0YNWqVQBs\n3ryZrCwLRh5KgD2GhkSk1KpbzcetK31uZH/X43A4mDt3LlOmTOGNN94gJ6+AsB7diYuL48CBA67n\nDR06lFGjRhEREcHdd99NnTp1SqxOMykIROSW5s41/55Qu3Zt5s+fDxS9bLVjx4507NgRgOrVq7N4\n8WJL6itJGhoSEbE5BYGIiM0pCEREbE5BICJicwoCERGbUxCIiNicLh8VkVtbSc8Vdp05wAzD4E9/\n+hNDhgzhvvvuA2Dn5kT+tuFj/vnPf5ZcHbcQBYGI3NpKeq6w68wB5nA4mDJlCiNGjKBTp04UFBTw\n/j/fYMlb/yq5Gm4xHhsaGjduHJ07d6Z3796ubZmZmcTExOB0OomJiSm1t2OLSNnWtGlTunfvzptv\nvsncuXO5Lyyc22+/nTfffJPevXvTu3dvlixZAsDx48fp27ev67ULFy7kjTfeAGDgwIHMnj2b6Oho\nevbsyf79+wG4cOECw4cPJzw8nNjYWKKiokhKSjL/jV7msSCIiopi0aJFRbYtXLiQzp0788knn9C5\nc2cWLlzoqeZFRG7KsGHDWLVqFVu3bqXvw4/xxRdfsGrVKpYvX86///1v3n//fQ4fPnzd/RiGwfLl\nyxkzZgxz584F4N133+W2227j448/5rnnnrM0BMCDQdChQ4erpmRNTEwkMjISgMjISNavX++p5kVE\nbkrlypUJDw/nwQcfpKKXF5999hlOpxNvb298fX25//772bdv33X343Q6AWjZsiUpKSkAfPbZZ0RE\nXJrKu1mzZjRp0sRzb8QNpl41lJ6eTq1atQCoWbMm6enpZjYvInJDypUrR7ly1/6aLF++PBcvXnQ9\n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\nkZ+fT2xsLH369MHpdAJQo0YN13DAqVOnCAgIAK7+HFJTU0vd57B//342bNhAaGgocXFx7Nq1i+nT\np3PmzBkKCgqAou8rMDCQkydPApe+VM+ePUv16tUtq/9GBQUFERQURJs2bQDo1asXhw4dKtN9vGPH\nDurVq0dAQAAVK1bE6XSyf//+MtvHV7rRfjXju63MBEFZnbrCMAwmTJhAo0aNiImJcW0PDQ1l5cqV\nAKxcuZIePXoU2W4YBp9//jl+fn6uw9DSYtSoUWzZsoUNGzbw6quv0qlTJ1555RU6duzIunWXZn1b\nsWKFq39DQ0NdV1KsW7eOTp063RJ/ZbmrZs2aBAUF8cMPPwCwc+dOGjduXKb7uE6dOnzxxRdkZ2dj\nGAY7d+6kSZMmZbaPr3Sj/RoSEsK2bdvIysoiKyuLbdu2ERISUqI1lak7izdv3syMGTNcU1c8++yz\nVpd00/bt28ejjz5K06ZNXePlcXFxtG7dmpEjR3Ly5Enq1KnDa6+9RrVq1TAMg6lTp7J161Z8fHyY\nMWMGrVq1svhdFN/u3btZvHgxCxYs4MSJEzz//PNkZWXRvHlzZs+ejZeXF7m5uYwePZqkpCT8/f2Z\nM2cO9evXt7r0G5KUlMSECRPIz8+nfv36zJw5k4sXL5bpPv773//Oxx9/TIUKFWjevDnTp08nLS2t\nTPVxXFwce/bsISMjgxo1ajB8+HDuv//+G+7X5cuXs2DBAgCGDBlC//79S7TOMhUEIiJy48rM0JCI\niBSPgkBExOYUBCIiNqcgEBGxOQWBiIjNKQhERGxOQSAiYnMKAhERm/v/MP1m0KDenvIAAAAASUVO\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qkGRfrn5yhgZ",
        "colab_type": "text"
      },
      "source": [
        "## 2.5 Kernel Density Estimate Plots\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-549n8Jc01yJ",
        "colab_type": "text"
      },
      "source": [
        "The step-type histograms we built made it possible to see clearly both distributions. The graph looked a bit overcrowded though, and the legend was not ideally positioned.\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1Oogmu0kyhTgtK-N1zqsdzYGisTM2D6bE\">\n",
        "\n",
        "If we added more histograms to the graph above, it would become highly unreadable, and it'd be difficult to see any clear patterns. One solution to this problem is to smooth out the shape of the histograms to make them look less dense on the graph. This is how a single histogram would look smoothed out:\n",
        "\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1us30ptyKArBL7GvemVRzYvBlGOD3KuMR\">\n",
        "\n",
        "We can smooth out our two histograms above for old and young players using the [Series.plot.kde()](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.plot.kde.html) function:\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GsVemyup09BU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "2b7470c3-061c-4af7-c2ce-35396d789fe1"
      },
      "source": [
        "wnba[wnba.Age >= 27]['MIN'].plot.kde(label = 'Old', legend = True)\n",
        "wnba[wnba.Age < 27]['MIN'].plot.kde(label = 'Young', legend = True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64f61e48>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mv7RT9Gc1w04",
        "colab_type": "text"
      },
      "source": [
        "Each of the smoothed histograms above is called a **kernel density estimate** plot or, shorter, **kernel density plot**. Unlike histograms, **kernel density** plots display densities on the y-axis instead of frequencies. The density values are actually probability values — which we'll be able to understand more about after the probability courses. All you need to know for now is that we can use kernel density plots to get a much clear picture about the shape of a distribution.\n",
        "\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Reproduce the kernel density plots above, and add a vertical line to demarcate the average point.\n",
        "  - The vertical line should be at point 497 on the x-axis.\n",
        "  - Label the vertical line **'Average'** and make sure the label is displayed in the legend.\n",
        "- Can we still see that most of the old players that belong to the **\"average or above\"** category play significantly more than average? If so, is the pattern more obvious (faster to observe) than in the case of the step-type histograms?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4aeD2UhB2HXZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SYWzw8ZiTWAy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "4e5a581c-f0cc-4fb7-c93e-262d5b8934ea"
      },
      "source": [
        "wnba[wnba.Age >= 27]['MIN'].plot.kde(label = 'Old', legend = True)\n",
        "wnba[wnba.Age < 27]['MIN'].plot.kde(label = 'Young', legend = True)\n",
        "plt.axvline(497, label = 'Average')\n",
        "plt.legend()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f3d71d25400>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nMTqATwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5aQBIQSN2mWU",
        "colab_type": "text"
      },
      "source": [
        "## 2.6 Drawbacks of Kernel Density Plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mw-p3Uh1293i",
        "colab_type": "text"
      },
      "source": [
        "As data scientists, we'll often need to compare more than two distributions. In fact, previously in this mission we compared five distributions on a grouped bar plot:\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1nSTEDf8EAAE8fQSqxs5dwrlqoU7PF9Gx\">\n",
        "\n",
        "Grouped bar plots are ideal for variables measured on nominal and ordinal scales. For variables measured on a ratio or interval scale, we learned that kernel density plots are a good solution when we have many distributions to compare. However, kernel density plots tend to become unreadable as we reach five distributions or more.\n",
        "\n",
        "Let's say we're interested in analyzing the distribution of player height as a function of player position. In other words, we want to figure out, for instance, whether centers are generally taller than forwards, whether forwards are generally shorter than guards, and so on. In the code below, we'll segment the data set by player position, and for each segment we'll generate a kernel density plot for the distribution of the **Height** variable:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-C6bbEnh3EDZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "f00a97e8-1e65-4eb1-cfc4-992eb30d6022"
      },
      "source": [
        "wnba[wnba.Pos == 'F']['Height'].plot.kde(label = 'F', legend = True)\n",
        "wnba[wnba.Pos == 'C']['Height'].plot.kde(label = 'C', legend = True)\n",
        "wnba[wnba.Pos == 'G']['Height'].plot.kde(label = 'G', legend = True)\n",
        "wnba[wnba.Pos == 'G/F']['Height'].plot.kde(label = 'G/F', legend = True)\n",
        "wnba[wnba.Pos == 'F/C']['Height'].plot.kde(label = 'F/C', legend = True)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d71d257b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fdeh9aOX3uqM",
        "colab_type": "text"
      },
      "source": [
        "If we look very closely, we can see a couple of clear patterns: the shortest players are generally guards, the tallest players are generally centers, mid-height players are generally forwards or play in a combined position, etc.\n",
        "\n",
        "Having to look very closely to a graph to identify obvious patterns is far from ideal. If there's any pattern, we want to see it immediately. To overcome this problem, we can use other kinds of graphs, which present the same information in a more readable way. For the rest of this mission, we'll explore two such alternatives.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5d4hHHgb4Qnm",
        "colab_type": "text"
      },
      "source": [
        "## 2.7 Strip Plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YJWvOLd34Uom",
        "colab_type": "text"
      },
      "source": [
        "This is one alternative we can use to visualize the distribution of **heights** as a function of **player** position:\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1aQYZGHJg1IDb0C5dUxaSE1coWb3ZI6Dp\">\n",
        "\n",
        "\n",
        "The **Pos** variable is represented on the x-axis, while **Height** is on the y-axis. Each of the five vertical lines made of distinctly colored bullets represents a distribution. These are the logical steps we'd take to build a plot like the one above:\n",
        "\n",
        "- Segment the data set by player position.\n",
        "- For every segment:\n",
        "    - List all the values in the **Height** variable.\n",
        "    - For every value in that list, draw a bullet point on a graph. The x-coordinate of the bullet point is given by the player position, and the y-coordinate by the player's height.\n",
        "    \n",
        "    \n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=1Cp_Pd3uSY-9nE7mPw9oGz788ZPsrMUpJ\">\n",
        "\n",
        "\n",
        "Because we segment by player position, for every segment the player position values will be identical for every player while their heights will vary more or less. Because of the segmentation, the player position is also guaranteed to be different from segment to segment. After drawing all the bullet points for all the segments, we'll inevitably end up with five narrow vertical strips, one above each unique value on the x-axis. Because of this, each of the five plots is called a **strip plot**.\n",
        "\n",
        "To generate the first graph above with five strip plots, we can use the [sns.stripplot()](https://seaborn.pydata.org/generated/seaborn.stripplot.html?highlight=stripplot#seaborn.stripplot) function from the seaborn module. We place the **Pos** variable on the x-axis and **Height** on the y-axis:\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vcVqYdrz4YQ1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "7471eb43-2417-4c17-dafc-1ab4597dce57"
      },
      "source": [
        "sns.stripplot(x = 'Pos', y = 'Height', data = wnba)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6eaab400>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 104
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n1WrlxIkTHD582IS0F6eCkHrZtGkTDoeDn/3sZ551bdu2ZcaMGQBs2LCBESNGmBXPVJd6ba40mzZt\nwm6313g9una9sh+odO73Iy0tjZ07d/KHP/zB8wm7ffv2tG/f3uSENakgLkNJSQmTJk0CoF27drz0\n0ksmJ/K+gwcP0r1794tu37BhA/PmzfMsz5w5E6vVip+fH2+//bYvIprmUq/NlebgwYP06NHD7Bim\nuNi54dzvx4EDB+jWrRs2m83MmJekgrgMV+IQ0w898cQTbN26FYfDwbJly3A6nTXeBV1JQ0w/9P3X\n5t133zU7jviQ0bmhrKzM8/tx4MABk5LVj77FJPWSlJTEt99+61lesGABr7/+Orm5uWzdurXFX4Su\nTW2vzZUoKSmJvXv3mh2jyfj+70dSUhKpqalUVlaanKp2KgiplyFDhlBaWsrSpUs960pKSgBYv349\nI0eONCua6Wp7ba5EQ4YMoaysjLfeesuzLjU1lS1btpiYyjzf//3o0KEDPXv25MUXX+TcdHjp6ems\nXbvWxIQXUkFIvVgsFl566SW++eYbRo8ezbRp03j44Yd58MEH2bx5M4MGDTI7omlqe22uRBaLhT//\n+c9s3LiRMWPGMH78eJ5//nmioqLMjmaKH/5+LFy4kJycHJKTk5kwYQJz585tcsOxms1VGkVWVhaP\nPvoor776qtlRRJqc5vr7oYIQERFDGmISERFDKggRETGkghAREUMqCBERMaQ7qUUa6NyMnZWVlSQk\nJPD0008TGBhodiyRRqNPECINdG46hQ8//BCHw8Hy5cvNjiTSqFQQIo1gwIABHD9+HIC///3vTJgw\ngQkTJvD6668DUFxczJ133skNN9zAhAkT+Oijj0xMK1I3GmISuUwVFRWsX7+eESNGsGfPHlasWME/\n/vEP3G43N910E4MGDfI8B+CVV14BoKCgwOTUIpemTxAiDXRuSuepU6fSpk0bpk2bxtatWxkzZgxB\nQUEEBweTnJzMli1b6NKlCxs3buTZZ59ly5YthIaGmh1f5JL0CUKkgeoz3Xvnzp1ZsWIF69at44UX\nXmDIkCHcd999Xk4ocnn0CUKkEQ0YMIDPP/8cl8tFcXExn3/+OQMGDMDpdBIYGMikSZO4/fbba0wL\nLtJU6ROESCPq0aMHKSkp3HjjjQBMmzaN7t27s2HDBp555hmsVit2u53HH3/c3KAidaDJ+kRExJCG\nmERExJAKQkREDKkgRETEkApCREQMqSBERMSQCkJERAypIERExJAKQkREDP1/Eun28w/S+TAAAAAA\nSUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BPum6AHx5yZ4",
        "colab_type": "text"
      },
      "source": [
        "Patterns are now immediately visible. We can see on the graph that the **shortest players are guards** — in fact, all players under 180 cm are guards. The **tallest players are centers** — this is the only category with players above 2 meters. Among combined positions, we can see that **F/C has slightly taller representatives** — most likely because it requires center qualities (and we've seen that the tallest players are generally centers).\n",
        "\n",
        "A **big downside** of strip plots is that the bullet **points overlap**. We can **fix** this by adding a bit of **jitter** to each distribution. We can do this by setting the jitter parameter to **True:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S97zw2FS6R44",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "e4d1130f-1909-4f09-d995-102541907aee"
      },
      "source": [
        "sns.stripplot(x = 'Pos', y = 'Height', data = wnba, jitter = True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64b3ccc0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jRG4rpvz6WKo",
        "colab_type": "text"
      },
      "source": [
        "On a side note, you might have noticed that strip plots are similar to the scatter plots we learned about in the visualization courses. **In fact, strip plots are actually scatter plots.** When one of the variables is nominal or ordinal, a scatter plot will generally take the form of a series of narrow strips (the number of narrow strips will be the same as the number of unique values in the nominal or ordinal variable).\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "\n",
        "- Using strip plots, examine the distribution of player **weight** (not height) as a function of player **position**. The graph should have the following properties:\n",
        "  - The **Pos** variable in on the x-axis and the **Weight** variable on the y-axis.\n",
        "  - Each **strip** plot has **jitter** added to it. The amount of jitter to apply is the one specific to **jitter = True.**\n",
        "- Do you see any similarity with the distributions of the **Height** variable? If so, how could this be explained?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ai9Nv3Um6p2a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UVEaFItNUBHs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "e8f8f6e4-7774-401a-fdeb-bfe1531bab69"
      },
      "source": [
        "sns.stripplot(x = 'Pos', y = 'Weight', data = wnba, jitter = True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64919ac8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_-16bb-77Omv",
        "colab_type": "text"
      },
      "source": [
        "## 2.8 Box plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRpQfNku8RP4",
        "colab_type": "text"
      },
      "source": [
        "Besides strip plots, there's another kind of graph we can use to display many distributions at once and make sure everything is still readable. Below, we use this kind of graph to plot again the distribution of player height as a function of player position:\n",
        "\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1YM9kJ-0f8eMvYEvI1C11TpvwQlqSuyRa\">\n",
        "\n",
        "Each individual plot above shows a distribution. Let's isolate the height distribution of guards and understand it by comparing it with a histogram showing the same distribution:\n",
        "\n",
        "<img width=\"800\" src=\"https://drive.google.com/uc?export=view&id=1ubAeLqYPthw2jJpN_ApMc30qM1BjSXpN\">\n",
        "\n",
        "In a nutshell, the graph on the right shows the range of the distribution and its three quartiles (the 25th, the 50th and the 75th percentile). This allows us to get a good visual intuition about the proportion of values that fall under a certain quartile, between any two quartiles, or between a quartile and the minimum or the maximum value in the distribution:\n",
        "\n",
        "\n",
        "<img width=\"800\" src=\"https://drive.google.com/uc?export=view&id=1Y0H3DLjHVbZOZSzOq8htlinzCxEAQW_R\">\n",
        "\n",
        "\n",
        "The two lines extending upwards and downwards out of the box in the middle look a bit like two whiskers, reason for which we call this plot a **box-and-whisker** plot, or, more convenient, just **box plot.**\n",
        "\n",
        "We can generate the five box plots above using the [sns.boxplot()](https://seaborn.pydata.org/generated/seaborn.boxplot.html) function. On the x-axis we want the **Pos** variable, and on the y-axis the **Height** variable.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "06YEoa0W8W42",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "33fb2059-f8c8-4728-e71e-ce21c395ffcb"
      },
      "source": [
        "sns.boxplot(x = 'Pos', y = 'Height', data = wnba)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d648eec18>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ODb44RO8-Qc9",
        "colab_type": "text"
      },
      "source": [
        "You might wonder what is the meaning of those few dots for the box plots of centers and guards/forwards (G/F), and **why some box plots seem to lack some of the quartiles**. We'll discuss this in the next screen. Now, let's practice generating box plots.\n",
        "\n",
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "- Using **sns.boxplot()**, generate a series of box plots to examine the distribution of player weight as a function of player position. Place the **Pos** variable on the x-axis and the **Weight** variable on the y-axis."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CV_jILuT-hXh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YCvFz1nJUVaX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "e2656320-6802-494a-abd7-7256c033d9a2"
      },
      "source": [
        "sns.boxplot(x = 'Pos', y = 'Weight', data = wnba)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d64882fd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\niIIAABiiIAAAhigIAIChbn2Zq9lGjhypqKgo++P169dr8ODBJiZyj8uXL2vt2rU6fvy4AgIC5OPj\nowULFiguLk6SlJKSoq1btyohIUF+fn7y8rr3PWTVqlUaM2aMmdFdrq3XxtN8//33WrNmjb766iv5\n+/srKChIb7zxhp588kmzo7lUa58ND94fTU1Neuedd1RaWip/f3/5+flp6dKlGjVqlFmxH0FBdECf\nPn20Y8cOs2O4lc1m05/+9CclJyfrH//4h6R711Tv3btXknTx4kWFhISod+/ekqTs7GwFBgaalted\n2nptPI3NZtOrr76q5ORk/fOf/5QknT59WlartccXxE99Njz8/li2bJkGDx6swsJCeXl56eLFizpz\n5owJaX8aBYF2OXTokHx8fDR37lz7tvDwcP3ud7+TJJWUlGjixIlmxTNVW6+Npzl06JC8vb1bvB4j\nRowwMZH5Hrw/vvnmG3355Zf6+9//bt/DjoiIUEREhMkJW6IgOuD27dt66aWXJEmDBw/W+vXrTU7k\nehUVFXrqqad+8t9LSkr0xhtv2B/PmzdPXl5e6t27t7Zv3+6OiKZp67XxNBUVFYqOjjY7hil+6rPh\nwfujvLxcI0eOVK9evcyM2SYKogM88RDTj7311ls6duyYfHx8tGXLFtXU1LT4FuRJh5h+7OHX5pNP\nPjE7DtzI6LOhsbHR/v4oLy83KVn7cBUT2iUyMlKnTp2yP161apU2bdqkK1eu6NixYz3+JHRrWntt\nPFFkZKS+/vprs2N0GQ+/PyIjI3X69Gk1NzebnKp1FATaZcKECfrhhx/08ccf27fdvn1bknTgwAFN\nmjTJrGima+218UQTJkxQY2Oj/vOf/9i3nT59WkePHjUxlXkefn888cQTevrpp7Vu3To9mA7v0qVL\n2rdvn4kJH0VBoF0sFovWr1+vzz//XJMnT9asWbO0bNkyLV26VEeOHFFMTIzZEU3T2mvjiSwWiz74\n4AOVlpbqxRdfVGJiot577z0NHDjQ7Gim+PH74+2335bValVcXJySkpKUkZHR5Q7HMpsrOkV1dbWW\nL1+uDRs2mB0F6HK66/uDggAAGOIQEwDAEAUBADBEQQAADFEQAABD3EkNOOnBjJ3Nzc0aOnSo3nnn\nHfn6+podC+g07EEATnowncJnn30mHx8fbd261exIQKeiIIBOMHbsWF24cEGStHHjRiUlJSkpKUmb\nNm2SJDU0NCgtLU2/+tWvlJSUpIKCAhPTAo7hEBPQQXfu3NGBAwc0ceJEnTx5Urm5udq2bZtsNpte\nfvllxcTE2NcByMrKkiRdv37d5NRA29iDAJz0YErnmTNnatCgQZo1a5aOHTumF198UX379pWfn5/i\n4uJ09OhRRUVFqbS0VH/729909OhR9e/f3+z4QJvYgwCc1J7p3p988knl5uZq//79yszM1IQJE/Tq\nq6+6OCHQMexBAJ1o7NixKioq0q1bt9TQ0KCioiKNHTtWNTU18vX11UsvvaT58+e3mBYc6KrYgwA6\nUXR0tFJSUjR79mxJ0qxZs/TUU0+ppKRE7777rry8vOTt7a0333zT3KCAA5isDwBgiENMAABDFAQA\nwBAFAQAwREEAAAxREAAAQxQEAMAQBQEAMERBAAAM/R9QDNS3QZkknwAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pCXUOoFP-7me",
        "colab_type": "text"
      },
      "source": [
        "### 2.9 Outliers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TgQBx0Hn_F7e",
        "colab_type": "text"
      },
      "source": [
        "The few dots we see for the box plots of centers and guards/forwards (G/F) represent values in the distribution that are much larger or much lower than the rest of the values. A value that is much lower or much larger than the rest of the values in a distribution is called an **outlier.**\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1WoZ6rZWu8bIFhJaPwQ5mDvoo2pU0dzLa\">\n",
        "\n",
        "\n",
        "A value is an **outlier** if:\n",
        "\n",
        "- It's larger than the upper quartile by 1.5 times the difference between the upper quartile and the lower quartile (the difference is also called the interquartile range).\n",
        "- It's lower than the lower quartile by 1.5 times the difference between the upper quartile and the lower quartile (the difference is also called the interquartile range).\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1NminuWMq8htgOFD5TeAyiLFhXdCtHQjJ\">\n",
        "\n",
        "Probably this is not yet crystal clear, so let's walk through an example. Let's consider the box plot for centers:\n",
        "\n",
        "<img width=\"800\" src=\"https://drive.google.com/uc?export=view&id=1krahzq8cce3FQmzXVekQM0UumStTIq8l\">\n",
        "\n",
        "\n",
        "From the output of **wnba[wnba['Pos'] == 'C']['Height'].describe()**, we can see that the upper quartile (the 75th percentile) is 196 and the lower quartile (the 25th percentile) is 193. Hence, the interquartile range is 3.\n",
        "\n",
        "\n",
        "$$\n",
        "\\text{interquartile range} = \\text{upper quartile} - \\text{lower quartil}\n",
        "$$\n",
        "\n",
        "\n",
        "Every value that is $3 \\times 1.5$  bigger than the upper quartile is considered an outlier. $3 \\times 1.5 = 4.5$, and the upper quartile is 196. This means that any value greater than $196 + 4.5 = 200.5$  is considered an outlier.\n",
        "\n",
        "Similarly, every value that is  $3 \\times 1.5$ lower that the lower quartile is an outlier. $3 \\times 1.5 = 4.5$, and the upper quartile is 193. This means that any value less than $193 - 4.5 = 188.5$ is an outlier.\n",
        "\n",
        "\n",
        "<img width=\"500\" src=\"https://drive.google.com/uc?export=view&id=18HtBhxsTPDtuhq4W0YoXfCs8Rx1gz-yQ\">\n",
        "\n",
        "\n",
        "This formal definition of an outlier is arbitrary, and it could be changed if we wanted to. For any given distribution, the upper and lower quartiles, and the interquartile range remain constant. However, the 1.5 factor can vary. If the factor is increased, then the range outside which values are considered outliers increases as well. If the factor is decreased, the range outside which values are considered outlier decreases as well.\n",
        "\n",
        "When we generate boxplots, we can increase or decrease this factor by using the **whis** parameter of the **sns.boxplot()** function. This is the same height distribution for centers without any outliers:\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GEU9c7vH_LUw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "8e117563-7095-465a-f6e6-9334be83e556"
      },
      "source": [
        "sns.boxplot(wnba[wnba['Pos'] == 'C']['Height'], whis = 4,\n",
        "              orient = 'vertical', width = .15,)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d649f0b70>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M0g8HA1yDpos",
        "colab_type": "text"
      },
      "source": [
        "**Exercise**\n",
        "\n",
        "<img width=\"100\" src=\"https://drive.google.com/uc?export=view&id=1E8tR7B9YYUXsU_rddJAyq0FrM0MSelxZ\">\n",
        "\n",
        "- Consider the quartiles of the **Games Played** variable:\n",
        "\n",
        "```python\n",
        ">> wnba['Games Played'].describe()\n",
        "count    143.000000\n",
        "mean      24.356643\n",
        "std        7.104259\n",
        "min        2.000000\n",
        "25%       22.000000\n",
        "50%       27.000000\n",
        "75%       29.000000\n",
        "max       32.000000\n",
        "Name: Games Played, dtype: float64\n",
        "```\n",
        "\n",
        "- Find the interquartile range, and assign the result to a variable named **iqr**.\n",
        "- Using a factor of 1.5, calculate the lower and upper bound outside which values are considered outliers.\n",
        "    - Assign the value of the lower bound to a variable named **lower_bound**.\n",
        "    - Assign the upper bound to a variable named **upper_bound.**\n",
        "- Find how many values in the distribution are outliers.\n",
        "    - Assign the number of outliers below the lower bound to a variable named **outliers_low.**\n",
        "    - Assign the number of outliers below the upper bound to a variable named **outliers_high.**\n",
        "- Plot a boxplot to check whether your answers are sensible.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gzs1kjoLE0kX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# put your code here"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HrY0DZLPU1ei",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "be89bd79-f9fb-40d0-d9ef-d0066c9ec6ab"
      },
      "source": [
        "iqr = 29 - 22\n",
        "lower_bound = 22 - (1.5 * iqr)\n",
        "upper_bound = 29 + (1.5 * iqr)\n",
        "outliers_low = sum(wnba['Games Played'] < lower_bound) # True values will count as 1 in the summation\n",
        "outliers_high = sum(wnba['Games Played'] > upper_bound)\n",
        "\n",
        "sns.boxplot(wnba['Games Played'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3d6476b8d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 112
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\npaen6+jRoxGeqGYSEhJ0/vx5SdL58+eDv/ESjVq2bKmYmBh5vV6NHDlSx44di/RIIbl27ZoyMzOV\nkZGhfv36SYre+3K7a4nW+yJJTZs2Vc+ePXXkyBFduXJFFRUVkqRz584FW2BdvQ1yaWmpiouLgz/e\ns2ePOnToEOGpaiY1NVWbN2+WJG3evFl9+/aN8ETVdyNgkrRjx46ouDfOOU2fPl1JSUl67bXXgp+P\nxvtyp2uJtvtSWFioK1euSJLKysq0d+9etW/fXj179tS2bdskSZs2bVJqamokxwxZvX250JkzZzRh\nwgRJ158xDR48WOPHj4/wVKHLyspSXl6eLl68qISEBE2cOFFpaWl65513dPbsWd1///1aunSpmjdv\nHulR/9XtriUvL08nT56UJCUmJmru3LnB57BWHTx4UKNHj1bHjh3l9V7fy2RlZalr165Rd1/udC25\nublRdV9Onjyp9957T4FAQM45DRgwQG+//bbOnDmjyZMn6/Lly+rUqZM++OCDqPhjb/U2yAAQbert\nIwsAiDYEGQCMIMgAYARBBgAjCDIAGFGv3/aG8Lpw4YIWLFigI0eOqFmzZoqNjdXrr7+u9PT0iM7V\nqVMndezYUYFAQElJSVq0aJEaNWqkxx9/XIcPHw7buitWrFDjxo01duzYsK2B+o0dMqrFOacJEyYo\nJSVFO3fuVHZ2tpYsWaJz585FejTdfffdysnJUW5urmJjY/XFF19EeiQgJOyQUS379u1TbGysRo0a\nFfxcYmKiXn75ZUnXX1gzZcoU/fXXX5KkmTNnqlu3btq/f79WrFihe+65Rz///LOee+45dezYUevW\nrVN5eblWrlyptm3bqrCwULNmzdKff/4pSZo2bZq6d++uvLw8zZ8/X9L190Z8+umn/3ifxM1SUlL0\n008/3fK5kpISvfXWW8G/Xjtp0iSlpaVp2bJlatasmV599VVJ0ocffqj4+HiNGTNGq1ev1jfffKOr\nV68qPT1dmZmZkqSPPvpImzdvVnx8vO67777gG9SAaoncmz8RzdauXevmz59/x6+Xlpa6srIy55xz\np06dcsOGDXPOObdv3z7XvXt3V1BQ4MrLy13v3r3dsmXLnHPOrVmzxs2bN88551xWVpY7cOCAc865\n/Px8N2DAAOecc2+88YY7ePCgc8654uJid+3atX+s/dhjjznnnLt27Zp78803g+/CvfnzRUVFzjnn\n/H6/S0tLc5WVle7MmTNu6NChzjnnAoGA69u3ryssLHS7d+92M2bMcJWVlS4QCLhx48a5vLw8d+zY\nMTd48GBXWlrqioqKXFpaWlS9Sxj2sENGrZgzZ44OHTqk2NhYbdy4URUVFZo7d65Onjwpr9er06dP\nB4/t0qVL8K/jtm3bVk899ZQkqWPHjtq/f78kae/evfL5fMH/pri4WCUlJerWrZsWLlwYfCHOjXfh\n3qysrExDhgyRdH2HPGLEiFu+7pzTkiVLdODAAXm9XhUUFOjChQt64IEH1Lx5c/3444+6cOGCHn74\nYbVo0UJ79uzRnj17gu88Li0t1enTp1VSUqK0tDQ1atRIkqLmfQmwiyCjWjp06KBvv/02+PGsWbNU\nWFgYjN+aNWvUsmVL5eTkqLKyUl27dg0ee/M7Bbxeb/Bjr9erQCAgSaqsrNSGDRt011133bLuuHHj\n1KdPH+3atUujRo3S6tWr1b59+1uOufEM+U6++uorFRYWKjs7W7GxsUpNTVV5ebkkaeTIkcrOztaF\nCxf0/PPPS7oe8HHjxunFF1+85Txr1qwJ6ecKCBW/qYdqeeKJJ1ReXq7PPvss+LmysrLgj4uKitSq\nVSt5vV7l5OQEQxuq3r1765NPPgl+fOLECUnS77//roceekjjxo1Tly5ddOrUqSrPXlRUpISEBMXG\nxmrfvn3Kz88Pfi0tLU27d+/WsWPH1Lt37+AsGzduVElJiSSpoKBAfr9fPXr00I4dO1RWVqbi4mJ9\n//33VZ4FuBk7ZFSLx+PRypUrtWDBAq1evVrx8fFq1KiR3n33XUnSSy+9pIkTJ2rz5s16+umn1bhx\n4yqdf/r06Zo7d64yMjIUCASUkpKiuXPnau3atdq/f788Ho86dOigZ555psqzZ2RkaPz48crIyNAj\njzyipKSk4NcaNmyonj17qmnTpoqJiZF0Pci//vprcIfcuHFjvf/+++rcubMGDhyoIUOGKD4+Xl26\ndKnyLMDNeNsbcJPKykoNGzZMy5YtU7t27SI9Dv5jeGQB/B+fz6f09HQ9+eSTxBgRwQ4ZAIxghwwA\nRhBkADCCIAOAEQQZAIwgyABgBEEGACP+F2vH0qbbyq6FAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GfyIiVn0F1A8",
        "colab_type": "text"
      },
      "source": [
        "## 2.10 Next Steps"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MzxEpz9YGAq-",
        "colab_type": "text"
      },
      "source": [
        "In this mission, we learned how to compare frequency distributions using graphs. Grouped bar plots are ideal to compare the frequency distributions of nominal or ordinal variables. For variables measured on an interval or ratio scale, we can use step-type histograms, kernel density plots, or, for better readability, strip plots or box plots.\n",
        "\n",
        "<img width=\"400\" src=\"https://drive.google.com/uc?export=view&id=1J7n1gvx8sQpJ-WNZF5do8VPQk_vf2ORb\">\n",
        "\n",
        "\n",
        "We've come a long way in this course from learning about sampling to visualizing multiple frequency distributions. We've made great progress so far and completed the workflow we set out to do in the first mission.\n",
        "\n",
        "\n",
        "<img width=\"600\" src=\"https://drive.google.com/uc?export=view&id=1XQ_nPiVB1pMBaS0ikBE6IPeifOYbDG11\">\n"
      ]
    }
  ]
}